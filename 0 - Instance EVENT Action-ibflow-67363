{"id":67363,"name":"0 - Instance EVENT Action","debugLoggingExpires":"2021-10-13T05:48:54Z","userId":87717,"accountId":62974,"createdDate":"2021-11-30T13:45:53Z","steps":[{"id":591925,"onSuccess":["FormatFlowEventData"],"onFailure":["SendErrorBuildFlowSwagger"],"name":"buildFlowSwagger","type":"script","properties":{"body":"const instanceName = getObjValue(trigger, 'response.body.name');\nconst isSyncSwagger = getObjValue(steps, 'hasMethodAndURI.continue');\nconst getFormulaBody = getObjValue(steps, 'GetFormula.response.body');\nconst name = instanceName ? ` \"${instanceName}\" ` : ' ';\nconst defaultInfo = { title: 'swagger', version: '0.0.1' };\nconst defaultDescription = `Execute this endpoint to start the${name}Flow Instance from Integration Builder. Changing the flow template endpoint will invalidate this API`;\n\nlet swagger = {};\n\nif (isSyncSwagger === true) {\n\tlet { uri, method } = getFormulaBody;\n\tmethod = method.toLowerCase();\n\tswagger = getObjValue(steps, 'getFormulaSwagger.response.body');\n\tswagger.info = defaultInfo;\n\tswagger.paths[uri][method].description = defaultDescription;\n\n\t// Need to clean the params\n\tswagger.paths[uri][method].parameters = swagger.paths[uri][method].parameters.map(param => {\n\t\tif (param.name && param.name === 'Elements-Formula-Instance-Id') {\n\t\t  param.description = 'The ID of the flow instance to execute this API against';\n\t\t  param.default = String(trigger.response.body.id);\n\t\t}\n\t\tlet cleanParam = {\n\t\t\t...setProperty(param, 'description'),\n\t\t\t...setProperty(param, 'in'),\n\t\t\t...setProperty(param, 'name'),\n\t\t\t...setProperty(param, 'required'),\n\t\t\t...setProperty(param, 'type'),\n\t\t\t...setProperty(param, 'default')\n\t\t}\n\t\tif (cleanParam.in === 'body') {\n\t\t\tcleanParam.schema = {\n\t\t\t\ttype: 'object',\n\t\t\t\tadditionalProperties: true\n\t\t\t};\n\t\t}\n\t\treturn cleanParam;\n\t})\n\tdelete swagger.paths[uri][method].summary;\n\tdelete swagger.paths[uri][method].responses[\"200\"].type;\n\n} else {\n\tconst basePath = `/elements/api-v2/formulas/instances/${steps.query.id}`;\n\tswagger = {\n\t\tswagger: '2.0',\n\t\tschemes: ['https'],\n\t\tbasePath,\n\t\thost: trigger.request.headers.host,\n\t\tinfo: defaultInfo,\n\t\tpaths: {\n\t\t\t\"/executions\": {\n\t\t\t\tpost: {\n\t\t\t\t\tsummary: 'Invokes the flow',\n\t\t\t\t\tdescription: defaultDescription,\n\t\t\t\t\tresponses: {\n\t\t\t\t\t\t\"default\": {\n\t\t\t\t\t\t\tdescription: 'Default response'\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tparameters: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdescription: 'The trigger body',\n\t\t\t\t\t\t\t\"in\": 'body',\n\t\t\t\t\t\t\tname: \"trigger\",\n\t\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\t\t\tadditionalProperties: true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n\n\ndone({ swagger });\n\nfunction setProperty(p, key) {\n\treturn (p[key] ? { [key]: p[key] } : {});\n};\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591915,"onSuccess":["wasUnableToFindInstance"],"onFailure":["ErrorQueryDeletedInstance"],"name":"checkDeletedInstance","type":"request","properties":{"query":"${steps.queryForDeleted.q}","headers":"${steps.InstanceHeaders.headers}","acceptableStatusCodes":"200, 404","method":"GET","api":"${steps.PrepareIfElementOrFlow.uri}"}},{"id":591899,"onSuccess":["PrepAccessTokenRequest"],"onFailure":["End"],"name":"CheckOrg","type":"filter","properties":{"body":"const myCompanyId = steps.GetOrgForCurrentUser.response.body.id;\nconst instanceCompanyId = steps.GetFullAccount.response.body.companyId;\n\nif (instanceCompanyId === myCompanyId) {\n  done(false);\n} else {\n  done(true);\n}\n"}},{"id":591891,"onSuccess":["query"],"onFailure":["End"],"name":"CheckStatus","type":"filter","properties":{"body":"  if (trigger.response.code === 200) {\n    done(true);\n  } else {\n    done(false);\n  }"}},{"id":591904,"onSuccess":["GetInstanceSwagger"],"onFailure":["GetFormula"],"name":"doElement","type":"filter","properties":{"body":"done(steps.PrepareIfElementOrFlow.doElement);"}},{"id":591912,"onSuccess":[],"onFailure":[],"name":"End","type":"script","properties":{"body":"done({ success: false });"}},{"id":591919,"onSuccess":[],"onFailure":[],"name":"ErrorQueryDeletedInstance","type":"script","properties":{"body":"// Configure these three params\nconst TOPIC = 'Error querying for deleted instance';\nconst PREVNAME = 'checkDeletedInstance';\nconst RECIPIENT = config.CEEmail;\nconst LASTSTEP = steps[PREVNAME];\n\ndone(errorNotification(TOPIC, LASTSTEP, PREVNAME, config.shouldSendEmail));\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n\tlet returnObj = {};\n\n\treturnObj.subject = `CE: ${errorMessage}`;\n\treturnObj.msg = `<b>Error Message:</b> ${errorMessage}`;\n\treturnObj.msg += `<br>Formula Name: ${info.formulaName}`;\n\n\tif (prevStep) {\n\t\treturnObj.msg += `<br>Terminated at step: ${prevStepName}`;\n\t}\n\n\treturnObj.msg += `<br>Formula ID: ${info.formulaId}`;\n\treturnObj.msg += `<br>Formula Instance ID: ${info.formulaInstanceId}`;\n\treturnObj.msg += `<br>Formula Execution ID: ${info.formulaExecutionId}`;\n\n\tif (prevStep) {\n\t\tlet reqURI = getObjValue(prevStep, 'request.uri');\n\t\treturnObj.msg += reqURI ? `<br>Request URL: ${reqURI}` : '';\n\n\t\tlet reqStatus = getObjValue(prevStep, 'response.code');\n\t\treturnObj.msg += reqStatus ? `<br>Response Status: ${reqStatus}` : '';\n\n\t\tlet reqMessage = getObjValue(prevStep, 'response.body.message');\n\t\tlet reqMessageLength = getObjValue(prevStep, 'response.body.message.length');\n\n\t\treturnObj.msg += reqMessage ? `<br>Response Error Message: ${reqMessage.substr(0, 500)}${reqMessageLength > 500 ? '...' : ''}` : '';\n\t}\n\n\treturnObj.msg += \"<br>---------------------------------------------------\";\n\n\tif (shouldEmail) {\n\t\tnotify.email(RECIPIENT, returnObj.subject, returnObj.msg);\n\t\treturnObj.sentEmail = true;\n\t} else {\n\t\treturnObj.sentEmail = false;\n\t}\n\n\treturnObj.notifyTo = RECIPIENT;\n\treturnObj.success = true;\n\n\treturn returnObj;\n}\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591931,"onSuccess":["SendDeleteEvent"],"onFailure":["SendFormatDeleteError"],"name":"formatDelete","type":"script","properties":{"body":"const formulaOrElement = steps.PrepareIfElementOrFlow.doElement ? 'ELEMENT' : 'FORMULA';\nconst externalType = 'IB_'+formulaOrElement+'_' + config.CEEnvironment.toUpperCase();\nconst access_token = steps.GetAxwayAccessToken.response && steps.GetAxwayAccessToken.response.body && steps.GetAxwayAccessToken.response.body.access_token;\nconst externalId = String(steps.pullOutUserId.id);\nlet path = config.proxyEndpointUrl;\n\nif (config.proxyEndpointUrl.endsWith('/')) {\n  path = path.slice(0, -1);\n}\npath = `${path}/${externalType}/${externalId}`;\n\ndone({\n    'headers': { \n      'Authorization': 'Bearer ' + access_token,\n      'X-Axway-Tenant-Id': steps.GetAxwayAccountId.axwayId.split('|')[0]\n    },\n    path\n  });\n"}},{"id":591908,"onSuccess":["SendEvent"],"onFailure":["SendFormatEventDataErrorNotification"],"name":"FormatEventData","type":"script","properties":{"body":"// Utility function to determine if a provided value exists\nlet exists = (value => value != undefined && value != null);\nlet notAllowed = new RegExp(\"[\\^\\\\w\\\\s\\-\\(\\)\\[\\\\]]\", 'g');\n\nif (exists(trigger.response) &&\n\texists(trigger.response.body) &&\n\texists(trigger.response.body.element) &&\n\texists(trigger.response.body.id) &&\n\texists(trigger.response.body.name)) {\n\tconst maxRPlength = 125;\n\tconst maxPNlength = 100;\n\tconst ceInstanceID = trigger.response.body.id;\n\tconst elementName = trigger.response.body.element.key;\n\tconst instanceName = trigger.response.body.name;\n\tconst artifactType = '_connector_';\n\n\t// The resourcePath aka basepath. Needs to be unique so we add env and type\n\tlet resourcePath = ((elementName + '_' + config.CEEnvironment.toLowerCase() +\n\t\tartifactType + ceInstanceID).replace(notAllowed, '')).replace(/\\s/g, '');\n\tresourcePath = '/' + resourcePath.substring(0, (maxRPlength - 2)) + '-';\n\n\t// The proxy name. Needs to be unique so we add env and type\n\tlet proxyName = (instanceName + ' ' + config.CEEnvironment.toLowerCase() +\n\t\tartifactType + ceInstanceID)\n\t\t.substring(0, maxPNlength)\n\t\t.replace(notAllowed, '')\n\n\t// The swagger definition\n\tconst swagger = steps.GetInstanceSwagger.response.body;\n\t\n\t// Hotfix APIGOV-10168\n\tlet swaggerTitle = getObjValue(swagger, 'info.title');\n\tif (swaggerTitle) {\n\t  swagger.info.title = swaggerTitle.replace(notAllowed, '');\n\t}\n\t\n\n\t// The auth header for pass-through\n\tlet auth = (`${steps.InstanceHeaders.headers.Authorization}`)\n\t\t.split(',')\n\t\t.map(b => b.trim())\n\t\t.filter(c => c.startsWith('User'))[0] || '';\n\tauth = `${auth}, Element ${trigger.response.body.token}`;\n\n\t// The icon to show in central\n\tconst icon = trigger.response.body.element.logo;\n\n\t// Tag the proxy with some useful info\n\tconst tags = [\"IntegrationBuilder\", config.CEEnvironment];\n\n\t// access_token for hitting ce-provider\n\tconst access_token = steps.GetAxwayAccessToken.response &&\n\t\tsteps.GetAxwayAccessToken.response.body &&\n\t\tsteps.GetAxwayAccessToken.response.body.access_token;\n\n\tconst externalType = 'IB_ELEMENT_' + config.CEEnvironment.toUpperCase();\n\n\tdone({\n\t\t'headers': {\n\t\t\t'Authorization': 'Bearer ' + access_token,\n\t\t\t'X-Axway-Tenant-Id': steps.GetAxwayAccountId.axwayId.split('|')[0]\n\t\t},\n\t\t'body': {\n\t\t\tresourcePath,\n\t\t\tproxyName,\n\t\t\tauth,\n\t\t\tswagger,\n\t\t\ttags,\n\t\t\texternalId: String(ceInstanceID),\n\t\t\texternalType,\n\t\t\ticon\n\t\t}\n\t});\n} else {\n\tthrow (\"Invalid element and element instance data in the trigger.\")\n}\n\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591926,"onSuccess":["SendFlowEvent"],"onFailure":["SendErrorFormatFlowEventData"],"name":"FormatFlowEventData","type":"script","properties":{"body":"// Utility function to determine if a provided value exists\nlet exists = (value => value != undefined && value != null);\nlet notAllowed = new RegExp(\"[\\^\\\\w\\\\s\\-\\(\\)\\[\\\\]]\", 'g');\n\nif (exists(trigger.response) &&\n\texists(trigger.response.body) &&\n\texists(trigger.response.body.formula) &&\n\texists(trigger.response.body.id) &&\n\texists(trigger.response.body.name)) {\n\tconst maxRPlength = 125;\n\tconst maxPNlength = 100;\n\tconst ceInstanceID = trigger.response.body.id;\n\tconst formulaName = steps.GetFormula.response.body.name;\n\tconst instanceName = trigger.response.body.name;\n\tconst artifactType = '_flow_';\n\t\n\t// The resourcePath aka basepath. Needs to be unique so we add env and type\n\tlet resourcePath = ((formulaName + '_' + config.CEEnvironment.toLowerCase() +\n\t\tartifactType + ceInstanceID).replace(notAllowed, ''))\n\t\t\t.replace(/\\s/g, '');\n\t\tresourcePath = '/' + resourcePath.substring(0, (maxRPlength - 2)) + '-';\n\t\n\t// The proxy name. Needs to be unique so we add env and type\n\tlet proxyName = (instanceName + ' ' + config.CEEnvironment.toLowerCase() +\n\t\tartifactType + ceInstanceID)\n\t\t\t.substring(0, maxPNlength)\n\t\t\t.replace(notAllowed, '')\n\t\n\t// The swagger definition\n\n\tconst swagger = steps.buildFlowSwagger.swagger;\n\n\t// The auth header for pass-through\n\tlet auth = (`${steps.InstanceHeaders.headers.Authorization}`)\n\t\t.split(',')\n\t\t.map(b => b.trim())\n\t\t.filter(c => c.startsWith('User') || \tc.startsWith('Organization'))\n\t\t.join(', ') || '';\n\t\n\t// Tag the proxy with some useful info\n\tconst tags = [ \"IntegrationBuilder\", config.CEEnvironment ];\n\n\t// access_token for hitting ce-provider\n\tconst access_token = steps.GetAxwayAccessToken.response && \t\n\t\tsteps.GetAxwayAccessToken.response.body &&\n\t\tsteps.GetAxwayAccessToken.response.body.access_token;\n\t\n\tconst externalType = 'IB_FORMULA_' + config.CEEnvironment.toUpperCase();\n\t\n\tdone({\n\t   'headers': { \n\t\t'Authorization': 'Bearer ' + access_token,\n\t\t'X-Axway-Tenant-Id': steps.GetAxwayAccountId.axwayId.split('|')[0]\n\t  },\n\t   'body': {\n\t\t  resourcePath,\n\t\t  proxyName,\n\t\t  auth, \n\t\t  swagger,\n\t\t  tags,\n\t\t  externalId: String(ceInstanceID),\n\t\t  externalType\n\t  }\n\t});\n} else {\n  throw(\"Invalid element and element instance data in the trigger.\")\n}"}},{"id":591901,"onSuccess":["GetAxwayAccountId"],"onFailure":["SendGetAxwayAccessTokenErrorNotification"],"name":"GetAxwayAccessToken","type":"httpRequest","properties":{"url":"${config.openid_uri}","form":"","headers":"${steps.PrepAccessTokenRequest.headers}","method":"POST","body":"${steps.PrepAccessTokenRequest.form}"}},{"id":591902,"onSuccess":["skipDelete"],"onFailure":["SendGetAxwayAccountIdErrorNotification"],"name":"GetAxwayAccountId","type":"script","properties":{"body":"// Utility function to determine if a provided value exists\nlet exists = (value => value != undefined && value != null);\n\nconst account = steps.GetFullAccount.response.body;\n\nif (exists(account) && exists(account.externalId)) {\n  done({\n    'axwayId': account.externalId \n  });\n} else {\n  throw(\"Invalid external account ID.\");\n}"}},{"id":591921,"onSuccess":["isManual"],"onFailure":["isFourOhFour"],"name":"GetFormula","type":"request","properties":{"headers":"${steps.InstanceHeaders.headers}","method":"GET","api":"/formulas/${trigger.response.body.formula.id}"}},{"id":591924,"onSuccess":["buildFlowSwagger"],"onFailure":["getSourceTemplate"],"name":"getFormulaSwagger","type":"request","properties":{"headers":"${steps.InstanceHeaders.headers}","method":"GET","api":"/formulas/${trigger.response.body.formula.id}/docs?baseUrl=https://staging.cloud-elements.com&version=-1"}},{"id":591897,"onSuccess":["GetOrgForCurrentUser"],"onFailure":["SendGetFullAccountErrorNotification"],"name":"GetFullAccount","type":"request","properties":{"method":"GET","api":"/accounts/${steps.GetFullUser.response.body.accountId}"}},{"id":591896,"onSuccess":["GetFullAccount"],"onFailure":["SendGetFullUserErrorNotification"],"name":"GetFullUser","type":"request","properties":{"headers":"${steps.InstanceHeaders.headers}","method":"GET","api":"/users/me/identity"}},{"id":591905,"onSuccess":["ValidateSwagger"],"onFailure":["isFourOhFour"],"name":"GetInstanceSwagger","type":"request","properties":{"headers":"${steps.InstanceHeaders.headers}","method":"GET","api":"/instances/${trigger.response.body.id}/docs?version=-1"}},{"id":591898,"onSuccess":["CheckOrg"],"onFailure":["SendGetOrgForCurrentUserErrorNotification"],"name":"GetOrgForCurrentUser","type":"request","properties":{"method":"GET","api":"/organizations/me"}},{"id":591917,"onSuccess":["Unexpected200Response"],"onFailure":["End"],"name":"getSourceTemplate","type":"request","properties":{"headers":"${steps.InstanceHeaders.headers}","acceptableStatusCodes":"","method":"GET","api":"${steps.PrepareIfElementOrFlow.templateURI}"}},{"id":591923,"onSuccess":["getFormulaSwagger"],"onFailure":["buildFlowSwagger"],"name":"hasMethodAndURI","type":"filter","properties":{"body":"const hasMethod = getObjValue(steps, 'GetFormula.response.body.method')\n\ndone(!!hasMethod);\n\n\n\n\n\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591893,"onSuccess":["PrepareIfElementOrFlow"],"onFailure":["SendErrorInstanceHeaders"],"name":"InstanceHeaders","type":"script","properties":{"body":"// Note: The name of the header below, i.e., Authorization needs to be spelled exactly as below, i.e., with an upper case A, otherwise the following step, i.e., GetInstanceSwagger will use the \"Authorization\" header for this user, who is the super-org admin user, instead of the user who created the instance.\n\nconst ceAuth = trigger.request.headers[\"authorization\"].split(\",\").filter(secret => secret.includes(\"User\") || secret.includes(\"Organization\")).join(\",\")\n\ndone({ \n  \"headers\": {\n    'Authorization': ceAuth\n  } \n  \n})"}},{"id":591913,"onSuccess":["queryForDeleted"],"onFailure":["SendGetInstanceError"],"name":"isFourOhFour","type":"filter","properties":{"body":"function getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}\n\nlet stepName = steps.doElement.continue ? 'GetInstanceSwagger' : 'GetFormula';\n\nlet prevStep = steps[stepName];\nlet reqStatus = getObjValue(prevStep, 'response.code');\n\nif (parseInt(reqStatus) === 404) {\n  done(true);\n} else {\n  done(false);\n}"}},{"id":591922,"onSuccess":["hasMethodAndURI"],"onFailure":["End"],"name":"isManual","type":"filter","properties":{"body":"const manualTriggers = (getObjValue(steps, 'GetFormula.response.body.triggers') || [])\n\t.filter(trigger => trigger.type === 'manual');\n\ndone(!!manualTriggers.length);\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591907,"onSuccess":["FormatEventData"],"onFailure":[],"name":"isValidSwagger","type":"filter","properties":{"body":"return steps.ValidateSwagger.response.body.isValid"}},{"id":591900,"onSuccess":["GetAxwayAccessToken"],"onFailure":["SendPrepAccessTokenRequestErrorNotification"],"name":"PrepAccessTokenRequest","type":"script","properties":{"body":"\ndone({\n  'headers': { \n      Authorization: 'Basic ' + CE.b64(config.openid_clientid + ':' + config.openid_client_secret),\n      'Content-Type': 'application/x-www-form-urlencoded'\n  },\n  form: 'grant_type=client_credentials'\n});\n"}},{"id":591894,"onSuccess":["pullOutUserId"],"onFailure":["SendErrorPrepareIfElementOrFlow"],"name":"PrepareIfElementOrFlow","type":"script","properties":{"body":"const triggerBody = getObjValue(trigger, 'response.body');\nconst method = getObjValue(trigger, 'request.method');\nconst isFormula = (getObjValue(trigger, 'request.uri') || '').includes('formulas');\n\nlet data = {};\nlet uri;\nlet templateURI;\n\nif (isFormula) {\n\tif (method === 'DELETE') {\n\t  let referer = getObjValue(trigger, 'request.headers.referer') || '';\n\t  let formulaId = referer.split('/').find((item, index, arr) => {return arr[index-1] === 'formulas' && arr[index+1] === 'instances'});\n\t  \n\t  templateURI = `/formulas/${formulaId}`;\n\t\turi = `/formulas/instances/${steps.query.id}`\n\t} else {\n\t  templateURI = `/formulas/${triggerBody.formula.id}`;\n\t\turi = `/formulas/${triggerBody.formula.id}/instances/${triggerBody.id}`;\n\t}\n  \n\tdata = {\n\t\tdoElement: false,\n\t\turi,\n\t\ttemplateURI\n\t}\n} else {\n  templateURI = `/elements/${triggerBody.elementId}`;\n\tdata = {\n\t\tdoElement: true,\n\t\turi: `/instances/${steps.query.id}`,\n\t\ttemplateURI\n\t}\n}\n\ndone(data);\n\n\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591895,"onSuccess":["GetFullUser"],"onFailure":["SendErrorIfPulloutUserIdFails"],"name":"pullOutUserId","type":"script","properties":{"body":"var id = trigger.request.uri.split('/').pop();\ndone({\n  id\n})\n"}},{"id":591892,"onSuccess":["InstanceHeaders"],"onFailure":["SendErrorIfQueryFails"],"name":"query","type":"script","properties":{"body":"let url=trigger.request.uri\nvar q = {\n  includeDeleted : (config.eventMethod === 'DELETE')\n};\nvar id;\n\nif (config.eventMethod === 'DELETE') {\n  // If delete method we need to get the instanceID at the end of the uri\n  const index = url.split('/');\n  const indexLength = index.length;\n  id = index[indexLength-1];\n} else {\n  // PUT and POST are in the body\n  id = trigger.response.body.id;\n}\ndone({\n  q,\n  id\n});\n"}},{"id":591914,"onSuccess":["checkDeletedInstance"],"onFailure":[],"name":"queryForDeleted","type":"script","properties":{"body":"var q = {\n  includeDeleted : true\n};\ndone({\n  q\n});"}},{"id":591932,"onSuccess":[],"onFailure":["SendSendDeleteEventError"],"name":"SendDeleteEvent","type":"httpRequest","properties":{"url":"${steps.formatDelete.path}","headers":"${steps.formatDelete.headers}","method":"DELETE","body":""}},{"id":591930,"onSuccess":[],"onFailure":[],"name":"SendErrorBuildFlowSwagger","type":"script","properties":{"body":"// Configure these three params\nconst TOPIC = 'Error building Flow Swagger';\nconst PREVNAME = 'buildFlowSwagger';\nconst RECIPIENT = config.CEEmail;\nconst LASTSTEP = steps[PREVNAME];\n\ndone(errorNotification(TOPIC, LASTSTEP, PREVNAME, config.shouldSendEmail));\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n\tlet returnObj = {};\n\n\treturnObj.subject = `CE: ${errorMessage}`;\n\treturnObj.msg = `<b>Error Message:</b> ${errorMessage}`;\n\treturnObj.msg += `<br>Formula Name: ${info.formulaName}`;\n\n\tif (prevStep) {\n\t\treturnObj.msg += `<br>Terminated at step: ${prevStepName}`;\n\t}\n\n\treturnObj.msg += `<br>Formula ID: ${info.formulaId}`;\n\treturnObj.msg += `<br>Formula Instance ID: ${info.formulaInstanceId}`;\n\treturnObj.msg += `<br>Formula Execution ID: ${info.formulaExecutionId}`;\n\n\tif (prevStep) {\n\t\tlet reqURI = getObjValue(prevStep, 'request.uri');\n\t\treturnObj.msg += reqURI ? `<br>Request URL: ${reqURI}` : '';\n\n\t\tlet reqStatus = getObjValue(prevStep, 'response.code');\n\t\treturnObj.msg += reqStatus ? `<br>Response Status: ${reqStatus}` : '';\n\n\t\tlet reqMessage = getObjValue(prevStep, 'response.body.message');\n\t\tlet reqMessageLength = getObjValue(prevStep, 'response.body.message.length');\n\n\t\treturnObj.msg += reqMessage ? `<br>Response Error Message: ${reqMessage.substr(0, 500)}${reqMessageLength > 500 ? '...' : ''}` : '';\n\t}\n\n\treturnObj.msg += \"<br>---------------------------------------------------\";\n\n\tif (shouldEmail) {\n\t\tnotify.email(RECIPIENT, returnObj.subject, returnObj.msg);\n\t\treturnObj.sentEmail = true;\n\t} else {\n\t\treturnObj.sentEmail = false;\n\t}\n\n\treturnObj.notifyTo = RECIPIENT;\n\treturnObj.success = true;\n\n\treturn returnObj;\n}\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591929,"onSuccess":[],"onFailure":[],"name":"SendErrorFormatFlowEventData","type":"script","properties":{"body":"// Configure these three params\nconst TOPIC = 'Error formatting flow event data';\nconst PREVNAME = 'FormatFlowEventData';\nconst RECIPIENT = config.CEEmail;\nconst LASTSTEP = steps[PREVNAME];\n\ndone(errorNotification(TOPIC, LASTSTEP, PREVNAME, config.shouldSendEmail));\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n\tlet returnObj = {};\n\n\treturnObj.subject = `CE: ${errorMessage}`;\n\treturnObj.msg = `<b>Error Message:</b> ${errorMessage}`;\n\treturnObj.msg += `<br>Formula Name: ${info.formulaName}`;\n\n\tif (prevStep) {\n\t\treturnObj.msg += `<br>Terminated at step: ${prevStepName}`;\n\t}\n\n\treturnObj.msg += `<br>Formula ID: ${info.formulaId}`;\n\treturnObj.msg += `<br>Formula Instance ID: ${info.formulaInstanceId}`;\n\treturnObj.msg += `<br>Formula Execution ID: ${info.formulaExecutionId}`;\n\n\tif (prevStep) {\n\t\tlet reqURI = getObjValue(prevStep, 'request.uri');\n\t\treturnObj.msg += reqURI ? `<br>Request URL: ${reqURI}` : '';\n\n\t\tlet reqStatus = getObjValue(prevStep, 'response.code');\n\t\treturnObj.msg += reqStatus ? `<br>Response Status: ${reqStatus}` : '';\n\n\t\tlet reqMessage = getObjValue(prevStep, 'response.body.message');\n\t\tlet reqMessageLength = getObjValue(prevStep, 'response.body.message.length');\n\n\t\treturnObj.msg += reqMessage ? `<br>Response Error Message: ${reqMessage.substr(0, 500)}${reqMessageLength > 500 ? '...' : ''}` : '';\n\t}\n\n\treturnObj.msg += \"<br>---------------------------------------------------\";\n\n\tif (shouldEmail) {\n\t\tnotify.email(RECIPIENT, returnObj.subject, returnObj.msg);\n\t\treturnObj.sentEmail = true;\n\t} else {\n\t\treturnObj.sentEmail = false;\n\t}\n\n\treturnObj.notifyTo = RECIPIENT;\n\treturnObj.success = true;\n\n\treturn returnObj;\n}\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591941,"onSuccess":[],"onFailure":[],"name":"SendErrorIfPulloutUserIdFails","type":"script","properties":{"body":"// Configure these three params\nconst TOPIC = 'Error getting user id';\nconst PREVNAME = 'pullOutUserId';\nconst RECIPIENT = config.CEEmail;\nconst LASTSTEP = steps[PREVNAME];\n\ndone(errorNotification(TOPIC, LASTSTEP, PREVNAME, config.shouldSendEmail));\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n\tlet returnObj = {};\n\n\treturnObj.subject = `CE: ${errorMessage}`;\n\treturnObj.msg = `<b>Error Message:</b> ${errorMessage}`;\n\treturnObj.msg += `<br>Formula Name: ${info.formulaName}`;\n\n\tif (prevStep) {\n\t\treturnObj.msg += `<br>Terminated at step: ${prevStepName}`;\n\t}\n\n\treturnObj.msg += `<br>Formula ID: ${info.formulaId}`;\n\treturnObj.msg += `<br>Formula Instance ID: ${info.formulaInstanceId}`;\n\treturnObj.msg += `<br>Formula Execution ID: ${info.formulaExecutionId}`;\n\n\tif (prevStep) {\n\t\tlet reqURI = getObjValue(prevStep, 'request.uri');\n\t\treturnObj.msg += reqURI ? `<br>Request URL: ${reqURI}` : '';\n\n\t\tlet reqStatus = getObjValue(prevStep, 'response.code');\n\t\treturnObj.msg += reqStatus ? `<br>Response Status: ${reqStatus}` : '';\n\n\t\tlet reqMessage = getObjValue(prevStep, 'response.body.message');\n\t\tlet reqMessageLength = getObjValue(prevStep, 'response.body.message.length');\n\n\t\treturnObj.msg += reqMessage ? `<br>Response Error Message: ${reqMessage.substr(0, 500)}${reqMessageLength > 500 ? '...' : ''}` : '';\n\t}\n\n\treturnObj.msg += \"<br>---------------------------------------------------\";\n\n\tif (shouldEmail) {\n\t\tnotify.email(RECIPIENT, returnObj.subject, returnObj.msg);\n\t\treturnObj.sentEmail = true;\n\t} else {\n\t\treturnObj.sentEmail = false;\n\t}\n\n\treturnObj.notifyTo = RECIPIENT;\n\treturnObj.success = true;\n\n\treturn returnObj;\n}\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591944,"onSuccess":[],"onFailure":[],"name":"SendErrorIfQueryFails","type":"script","properties":{"body":"// Configure these three params\nconst TOPIC = 'Error formatting query';\nconst PREVNAME = 'query';\nconst RECIPIENT = config.CEEmail;\nconst LASTSTEP = steps[PREVNAME];\n\ndone(errorNotification(TOPIC, LASTSTEP, PREVNAME, config.shouldSendEmail));\n\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n\tlet returnObj = {};\n\n\treturnObj.subject = `CE: ${errorMessage}`;\n\treturnObj.msg = `<b>Error Message:</b> ${errorMessage}`;\n\treturnObj.msg += `<br>Formula Name: ${info.formulaName}`;\n\n\tif (prevStep) {\n\t\treturnObj.msg += `<br>Terminated at step: ${prevStepName}`;\n\t}\n\n\treturnObj.msg += `<br>Formula ID: ${info.formulaId}`;\n\treturnObj.msg += `<br>Formula Instance ID: ${info.formulaInstanceId}`;\n\treturnObj.msg += `<br>Formula Execution ID: ${info.formulaExecutionId}`;\n\n\tif (prevStep) {\n\t\tlet reqURI = getObjValue(prevStep, 'request.uri');\n\t\treturnObj.msg += reqURI ? `<br>Request URL: ${reqURI}` : '';\n\n\t\tlet reqStatus = getObjValue(prevStep, 'response.code');\n\t\treturnObj.msg += reqStatus ? `<br>Response Status: ${reqStatus}` : '';\n\n\t\tlet reqMessage = getObjValue(prevStep, 'response.body.message');\n\t\tlet reqMessageLength = getObjValue(prevStep, 'response.body.message.length');\n\n\t\treturnObj.msg += reqMessage ? `<br>Response Error Message: ${reqMessage.substr(0, 500)}${reqMessageLength > 500 ? '...' : ''}` : '';\n\t}\n\n\treturnObj.msg += \"<br>---------------------------------------------------\";\n\n\tif (shouldEmail) {\n\t\tnotify.email(RECIPIENT, returnObj.subject, returnObj.msg);\n\t\treturnObj.sentEmail = true;\n\t} else {\n\t\treturnObj.sentEmail = false;\n\t}\n\n\treturnObj.notifyTo = RECIPIENT;\n\treturnObj.success = true;\n\n\treturn returnObj;\n}\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591943,"onSuccess":[],"onFailure":[],"name":"SendErrorInstanceHeaders","type":"script","properties":{"body":"// Configure these three params\nconst TOPIC = 'Error formatting instance headers';\nconst PREVNAME = 'InstanceHeaders';\nconst RECIPIENT = config.CEEmail;\nconst LASTSTEP = steps[PREVNAME];\n\ndone(errorNotification(TOPIC, LASTSTEP, PREVNAME, config.shouldSendEmail));\n\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n\tlet returnObj = {};\n\n\treturnObj.subject = `CE: ${errorMessage}`;\n\treturnObj.msg = `<b>Error Message:</b> ${errorMessage}`;\n\treturnObj.msg += `<br>Formula Name: ${info.formulaName}`;\n\n\tif (prevStep) {\n\t\treturnObj.msg += `<br>Terminated at step: ${prevStepName}`;\n\t}\n\n\treturnObj.msg += `<br>Formula ID: ${info.formulaId}`;\n\treturnObj.msg += `<br>Formula Instance ID: ${info.formulaInstanceId}`;\n\treturnObj.msg += `<br>Formula Execution ID: ${info.formulaExecutionId}`;\n\n\tif (prevStep) {\n\t\tlet reqURI = getObjValue(prevStep, 'request.uri');\n\t\treturnObj.msg += reqURI ? `<br>Request URL: ${reqURI}` : '';\n\n\t\tlet reqStatus = getObjValue(prevStep, 'response.code');\n\t\treturnObj.msg += reqStatus ? `<br>Response Status: ${reqStatus}` : '';\n\n\t\tlet reqMessage = getObjValue(prevStep, 'response.body.message');\n\t\tlet reqMessageLength = getObjValue(prevStep, 'response.body.message.length');\n\n\t\treturnObj.msg += reqMessage ? `<br>Response Error Message: ${reqMessage.substr(0, 500)}${reqMessageLength > 500 ? '...' : ''}` : '';\n\t}\n\n\treturnObj.msg += \"<br>---------------------------------------------------\";\n\n\tif (shouldEmail) {\n\t\tnotify.email(RECIPIENT, returnObj.subject, returnObj.msg);\n\t\treturnObj.sentEmail = true;\n\t} else {\n\t\treturnObj.sentEmail = false;\n\t}\n\n\treturnObj.notifyTo = RECIPIENT;\n\treturnObj.success = true;\n\n\treturn returnObj;\n}\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591942,"onSuccess":[],"onFailure":[],"name":"SendErrorPrepareIfElementOrFlow","type":"script","properties":{"body":"// Configure these three params\nconst TOPIC = 'Error preparinging for flow';\nconst PREVNAME = 'PrepareIfElementOrFlow';\nconst RECIPIENT = config.CEEmail;\nconst LASTSTEP = steps[PREVNAME];\n\ndone(errorNotification(TOPIC, LASTSTEP, PREVNAME, config.shouldSendEmail));\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n\tlet returnObj = {};\n\n\treturnObj.subject = `CE: ${errorMessage}`;\n\treturnObj.msg = `<b>Error Message:</b> ${errorMessage}`;\n\treturnObj.msg += `<br>Formula Name: ${info.formulaName}`;\n\n\tif (prevStep) {\n\t\treturnObj.msg += `<br>Terminated at step: ${prevStepName}`;\n\t}\n\n\treturnObj.msg += `<br>Formula ID: ${info.formulaId}`;\n\treturnObj.msg += `<br>Formula Instance ID: ${info.formulaInstanceId}`;\n\treturnObj.msg += `<br>Formula Execution ID: ${info.formulaExecutionId}`;\n\n\tif (prevStep) {\n\t\tlet reqURI = getObjValue(prevStep, 'request.uri');\n\t\treturnObj.msg += reqURI ? `<br>Request URL: ${reqURI}` : '';\n\n\t\tlet reqStatus = getObjValue(prevStep, 'response.code');\n\t\treturnObj.msg += reqStatus ? `<br>Response Status: ${reqStatus}` : '';\n\n\t\tlet reqMessage = getObjValue(prevStep, 'response.body.message');\n\t\tlet reqMessageLength = getObjValue(prevStep, 'response.body.message.length');\n\n\t\treturnObj.msg += reqMessage ? `<br>Response Error Message: ${reqMessage.substr(0, 500)}${reqMessageLength > 500 ? '...' : ''}` : '';\n\t}\n\n\treturnObj.msg += \"<br>---------------------------------------------------\";\n\n\tif (shouldEmail) {\n\t\tnotify.email(RECIPIENT, returnObj.subject, returnObj.msg);\n\t\treturnObj.sentEmail = true;\n\t} else {\n\t\treturnObj.sentEmail = false;\n\t}\n\n\treturnObj.notifyTo = RECIPIENT;\n\treturnObj.success = true;\n\n\treturn returnObj;\n}\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591928,"onSuccess":[],"onFailure":[],"name":"SendErrorSendFlowEvent","type":"script","properties":{"body":"// Configure these params\nconst TOPIC = 'Error sending event to proxy registration server';\nconst PREVNAME = 'SendFlowEvent';\nconst RECIPIENT = config.email;\nconst PREVSTEP = steps[PREVNAME];\n\ndone(errorNotification(TOPIC, PREVSTEP, PREVNAME, config.shouldSendEmail));\n\n// This code is different than the other flows\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n\tlet returnObj = {};\n\tlet resCode = getObjValue(prevStep, 'response.code');\n\tresCode = resCode ? `${resCode} ` : null;\n\n\t// Subject\n\treturnObj.subject = `CE: ${resCode ? resCode : ''}${errorMessage}`;\n\n\t// Body\n\tlet resBody = getObjValue(prevStep, 'response.body');\n\tlet stringifiedBody;\n\ttry {\n\t\tif (resBody) {\n\t\t\tstringifiedBody = JSON.stringify(resBody, null, 2);\n\t\t\terrorMessage += '<br/>';\n\t\t\terrorMessage += '<pre>';\n\t\t\terrorMessage += stringifiedBody;\n\t\t\terrorMessage += '</pre>';\n\t\t}\n\t} catch (e) {\n\t\t// do nothing\n\t}\n\treturnObj.msg = `<b>Error Message:</b> ${errorMessage}`;\n\treturnObj.msg += `<br>Formula Name: ${info.formulaName}`;\n\treturnObj.msg += prevStep ? `<br>Terminated at step: ${prevStepName}` : '';\n\n\treturnObj.msg += `<br>Formula ID: ${info.formulaId}`;\n\treturnObj.msg += `<br>Formula Instance ID: ${info.formulaInstanceId}`;\n\treturnObj.msg += `<br>Formula Execution ID: ${info.formulaExecutionId}`;\n\treturnObj.msg += `<br>Instance ID: ${trigger.response.body.id}`;\n\treturnObj.msg += `<br>Formula ID: ${trigger.response.body.formula.id}`;\n\treturnObj.msg += `<br>Method: ${config.eventMethod}`;\n\treturnObj.msg += `<br>TenantId: ${steps.GetFullAccount.response.body.externalId.split('|',1)[0]}`;\n\n\tlet reqStatus = getObjValue(prevStep, 'response.code');\n\tif (prevStep) {\n\t\tlet reqURI = getObjValue(prevStep, 'request.uri');\n\t\treturnObj.msg += reqURI ? `<br>Request URL: ${reqURI}` : '';\n\t\treturnObj.msg += reqStatus ? `<br>Response Status: ${reqStatus}` : '';\n\n\t\tlet transactionId = getObjValue(prevStep, 'response.headers');\n\t\ttransactionId = transactionId && transactionId['x-axway-transaction-id']\n\t\treturnObj.msg += transactionId ? `<br>TransactionID: ${transactionId}` : '';\n\t}\n\n\treturnObj.msg += \"<br>---------------------------------------------------\";\n\n\tif (shouldEmail && (reqStatus == 400) && (stringifiedBody || '').includes(\"Request validation failed\")) {\n\t\t// Email CE if we CE sent dirty data\n\t\tnotify.email(config.CEEmail, returnObj.subject, returnObj.msg);\n\t\treturnObj.sentEmail = true;\n\t\treturnObj.notifyTo = config.CEEmail;\n\t} else if (shouldEmail && reqStatus == 404 && config.eventMethod == 'PUT') {\n\t\t// Don't email if we get 404 on update. It is trying to update old proxy\n\t} else if (shouldEmail) {\n\t\t// Email pagerduty for any other issue\n\t\tnotify.email(RECIPIENT, returnObj.subject, returnObj.msg);\n\t\treturnObj.sentEmail = true;\n\t\treturnObj.notifyTo = RECIPIENT;\n\t} else {\n\t\treturnObj.sentEmail = false;\n\t}\n\n\treturnObj.success = false;\n\treturn returnObj;\n}\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591909,"onSuccess":[],"onFailure":["SendSendEventErrorNotification"],"name":"SendEvent","type":"httpRequest","properties":{"url":"${config.proxyEndpointUrl}","headers":"${steps.FormatEventData.headers}","acceptableStatusCodes":"","method":"${config.eventMethod}","body":"${steps.FormatEventData.body}"}},{"id":591927,"onSuccess":[],"onFailure":["SendErrorSendFlowEvent"],"name":"SendFlowEvent","type":"httpRequest","properties":{"url":"${config.proxyEndpointUrl}","headers":"${steps.FormatFlowEventData.headers}","acceptableStatusCodes":"","method":"${config.eventMethod}","body":"${steps.FormatFlowEventData.body}"}},{"id":591934,"onSuccess":[],"onFailure":[],"name":"SendFormatDeleteError","type":"script","properties":{"body":"// Configure these three params\nconst TOPIC = 'Error formatting delete payload';\nconst PREVNAME = 'formatDelete';\nconst RECIPIENT = config.CEEmail;\nconst LASTSTEP = steps[PREVNAME];\n\ndone(errorNotification(TOPIC, LASTSTEP, PREVNAME, config.shouldSendEmail));\n\n/**\n* Sends an email with the given error message to the user's email-address.\n* @param errorMessage The message to be appended to the email\n* @param prevStep The data from previous step, used to populate the errorMessage\n* @param prevStepName The name of the step where the formula was before failure.\n* @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n* @return The message and body to be displayed in the execution.\n*/\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n\tlet returnObj = {};\n\n\treturnObj.subject = `CE: ${errorMessage}`;\n\treturnObj.msg = `<b>Error Message:</b> ${errorMessage}`;\n\treturnObj.msg += `<br>Formula Name: ${info.formulaName}`;\n\n\tif (prevStep) {\n\t\treturnObj.msg += `<br>Terminated at step: ${prevStepName}`;\n\t}\n\n\treturnObj.msg += `<br>Formula ID: ${info.formulaId}`;\n\treturnObj.msg += `<br>Formula Instance ID: ${info.formulaInstanceId}`;\n\treturnObj.msg += `<br>Formula Execution ID: ${info.formulaExecutionId}`;\n\n\tif (prevStep) {\n\t\tlet reqURI = getObjValue(prevStep, 'request.uri');\n\t\treturnObj.msg += reqURI ? `<br>Request URL: ${reqURI}` : '';\n\n\t\tlet reqStatus = getObjValue(prevStep, 'response.code');\n\t\treturnObj.msg += reqStatus ? `<br>Response Status: ${reqStatus}` : '';\n\n\t\tlet reqMessage = getObjValue(prevStep, 'response.body.message');\n\t\tlet reqMessageLength = getObjValue(prevStep, 'response.body.message.length');\n\n\t\treturnObj.msg += reqMessage ? `<br>Response Error Message: ${reqMessage.substr(0, 500)}${reqMessageLength > 500 ? '...' : ''}` : '';\n\t}\n\n\treturnObj.msg += \"<br>---------------------------------------------------\";\n\n\tif (shouldEmail) {\n\t\tnotify.email(RECIPIENT, returnObj.subject, returnObj.msg);\n\t\treturnObj.sentEmail = true;\n\t} else {\n\t\treturnObj.sentEmail = false;\n\t}\n\n\treturnObj.notifyTo = RECIPIENT;\n\treturnObj.success = true;\n\n\treturn returnObj;\n}\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}\n"}},{"id":591911,"onSuccess":[],"onFailure":[],"name":"SendFormatEventDataErrorNotification","type":"script","properties":{"body":"// Configure these three params\nconst TOPIC = 'Error formatting proxy registration request';\nconst PREVNAME = 'FormatEventData';\nconst RECIPIENT = config.CEEmail;\nconst LASTSTEP = steps[PREVNAME];\n\ndone(errorNotification(TOPIC, LASTSTEP, PREVNAME, config.shouldSendEmail));\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n\tlet returnObj = {};\n\n\treturnObj.subject = `CE: ${errorMessage}`;\n\treturnObj.msg = `<b>Error Message:</b> ${errorMessage}`;\n\treturnObj.msg += `<br>Formula Name: ${info.formulaName}`;\n\n\tif (prevStep) {\n\t\treturnObj.msg += `<br>Terminated at step: ${prevStepName}`;\n\t}\n\n\treturnObj.msg += `<br>Formula ID: ${info.formulaId}`;\n\treturnObj.msg += `<br>Formula Instance ID: ${info.formulaInstanceId}`;\n\treturnObj.msg += `<br>Formula Execution ID: ${info.formulaExecutionId}`;\n\n\tif (prevStep) {\n\t\tlet reqURI = getObjValue(prevStep, 'request.uri');\n\t\treturnObj.msg += reqURI ? `<br>Request URL: ${reqURI}` : '';\n\n\t\tlet reqStatus = getObjValue(prevStep, 'response.code');\n\t\treturnObj.msg += reqStatus ? `<br>Response Status: ${reqStatus}` : '';\n\n\t\tlet reqMessage = getObjValue(prevStep, 'response.body.message');\n\t\tlet reqMessageLength = getObjValue(prevStep, 'response.body.message.length');\n\n\t\treturnObj.msg += reqMessage ? `<br>Response Error Message: ${reqMessage.substr(0, 500)}${reqMessageLength > 500 ? '...' : ''}` : '';\n\t}\n\n\treturnObj.msg += \"<br>---------------------------------------------------\";\n\n\tif (shouldEmail) {\n\t\tnotify.email(RECIPIENT, returnObj.subject, returnObj.msg);\n\t\treturnObj.sentEmail = true;\n\t} else {\n\t\treturnObj.sentEmail = false;\n\t}\n\n\treturnObj.notifyTo = RECIPIENT;\n\treturnObj.success = true;\n\n\treturn returnObj;\n}\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591936,"onSuccess":[],"onFailure":[],"name":"SendGetAxwayAccessTokenErrorNotification","type":"script","properties":{"body":"// Configure these three params\nconst TOPIC = 'Error getting Axway access_token';\nconst PREVNAME = 'GetAxwayAccessToken';\nconst RECIPIENT = config.email;\nconst LASTSTEP = steps[PREVNAME];\n\ndone(errorNotification(TOPIC, LASTSTEP, PREVNAME, config.shouldSendEmail));\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n\tlet returnObj = {};\n\n\treturnObj.subject = `CE: ${errorMessage}`;\n\treturnObj.msg = `<b>Error Message:</b> ${errorMessage}`;\n\treturnObj.msg += `<br>Formula Name: ${info.formulaName}`;\n\n\tif (prevStep) {\n\t\treturnObj.msg += `<br>Terminated at step: ${prevStepName}`;\n\t}\n\n\treturnObj.msg += `<br>Formula ID: ${info.formulaId}`;\n\treturnObj.msg += `<br>Formula Instance ID: ${info.formulaInstanceId}`;\n\treturnObj.msg += `<br>Formula Execution ID: ${info.formulaExecutionId}`;\n\n\tif (prevStep) {\n\t\tlet reqURI = getObjValue(prevStep, 'request.uri');\n\t\treturnObj.msg += reqURI ? `<br>Request URL: ${reqURI}` : '';\n\n\t\tlet reqStatus = getObjValue(prevStep, 'response.code');\n\t\treturnObj.msg += reqStatus ? `<br>Response Status: ${reqStatus}` : '';\n\n\t\tlet reqMessage = JSON.stringify(getObjValue(prevStep, 'response.body') || '');\n\t\tlet reqMessageLength = reqMessage.length;\n\n\t\treturnObj.msg += reqMessage.length ? `<br>Response Error Message: ${reqMessage.substr(0, 500)}${reqMessageLength > 500 ? '...' : ''}` : '';\n\t}\n\n\treturnObj.msg += \"<br>---------------------------------------------------\";\n\n\tif (shouldEmail) {\n\t\tnotify.email(RECIPIENT, returnObj.subject, returnObj.msg);\n\t\treturnObj.sentEmail = true;\n\t} else {\n\t\treturnObj.sentEmail = false;\n\t}\n\n\treturnObj.notifyTo = RECIPIENT;\n\treturnObj.success = true;\n\n\treturn returnObj;\n}\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591935,"onSuccess":[],"onFailure":[],"name":"SendGetAxwayAccountIdErrorNotification","type":"script","properties":{"body":"// Configure these three params\nconst TOPIC = 'Error retrieving Axway account external ID';\nconst PREVNAME = 'GetAxwayAccountId';\nconst RECIPIENT = config.CEEmail;\nconst LASTSTEP = steps[PREVNAME];\n\ndone(errorNotification(TOPIC, LASTSTEP, PREVNAME, config.shouldSendEmail));\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n\tlet returnObj = {};\n\n\treturnObj.subject = `CE: ${errorMessage}`;\n\treturnObj.msg = `<b>Error Message:</b> ${errorMessage}`;\n\treturnObj.msg += `<br>Formula Name: ${info.formulaName}`;\n\n\tif (prevStep) {\n\t\treturnObj.msg += `<br>Terminated at step: ${prevStepName}`;\n\t}\n\n\treturnObj.msg += `<br>Formula ID: ${info.formulaId}`;\n\treturnObj.msg += `<br>Formula Instance ID: ${info.formulaInstanceId}`;\n\treturnObj.msg += `<br>Formula Execution ID: ${info.formulaExecutionId}`;\n\n\tif (prevStep) {\n\t\tlet reqURI = getObjValue(prevStep, 'request.uri');\n\t\treturnObj.msg += reqURI ? `<br>Request URL: ${reqURI}` : '';\n\n\t\tlet reqStatus = getObjValue(prevStep, 'response.code');\n\t\treturnObj.msg += reqStatus ? `<br>Response Status: ${reqStatus}` : '';\n\n\t\tlet reqMessage = getObjValue(prevStep, 'response.body.message');\n\t\tlet reqMessageLength = getObjValue(prevStep, 'response.body.message.length');\n\n\t\treturnObj.msg += reqMessage ? `<br>Response Error Message: ${reqMessage.substr(0, 500)}${reqMessageLength > 500 ? '...' : ''}` : '';\n\t}\n\n\treturnObj.msg += \"<br>---------------------------------------------------\";\n\n\tif (shouldEmail) {\n\t\tnotify.email(RECIPIENT, returnObj.subject, returnObj.msg);\n\t\treturnObj.sentEmail = true;\n\t} else {\n\t\treturnObj.sentEmail = false;\n\t}\n\n\treturnObj.notifyTo = RECIPIENT;\n\treturnObj.success = true;\n\n\treturn returnObj;\n}\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591939,"onSuccess":[],"onFailure":[],"name":"SendGetFullAccountErrorNotification","type":"script","properties":{"body":"// Configure these three params\nconst TOPIC = 'Error retrieving account info';\nconst PREVNAME = 'GetFullAccount';\nconst RECIPIENT = config.CEEmail;\nconst LASTSTEP = steps[PREVNAME];\n\ndone(errorNotification(TOPIC, LASTSTEP, PREVNAME, config.shouldSendEmail));\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n\tlet returnObj = {};\n\n\treturnObj.subject = `CE: ${errorMessage}`;\n\treturnObj.msg = `<b>Error Message:</b> ${errorMessage}`;\n\treturnObj.msg += `<br>Formula Name: ${info.formulaName}`;\n\n\tif (prevStep) {\n\t\treturnObj.msg += `<br>Terminated at step: ${prevStepName}`;\n\t}\n\n\treturnObj.msg += `<br>Formula ID: ${info.formulaId}`;\n\treturnObj.msg += `<br>Formula Instance ID: ${info.formulaInstanceId}`;\n\treturnObj.msg += `<br>Formula Execution ID: ${info.formulaExecutionId}`;\n\n\tif (prevStep) {\n\t\tlet reqURI = getObjValue(prevStep, 'request.uri');\n\t\treturnObj.msg += reqURI ? `<br>Request URL: ${reqURI}` : '';\n\n\t\tlet reqStatus = getObjValue(prevStep, 'response.code');\n\t\treturnObj.msg += reqStatus ? `<br>Response Status: ${reqStatus}` : '';\n\n\t\tlet reqMessage = getObjValue(prevStep, 'response.body.message');\n\t\tlet reqMessageLength = getObjValue(prevStep, 'response.body.message.length');\n\n\t\treturnObj.msg += reqMessage ? `<br>Response Error Message: ${reqMessage.substr(0, 500)}${reqMessageLength > 500 ? '...' : ''}` : '';\n\t}\n\n\treturnObj.msg += \"<br>---------------------------------------------------\";\n\n\tif (shouldEmail) {\n\t\tnotify.email(RECIPIENT, returnObj.subject, returnObj.msg);\n\t\treturnObj.sentEmail = true;\n\t} else {\n\t\treturnObj.sentEmail = false;\n\t}\n\n\treturnObj.notifyTo = RECIPIENT;\n\treturnObj.success = true;\n\n\treturn returnObj;\n}\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591940,"onSuccess":[],"onFailure":[],"name":"SendGetFullUserErrorNotification","type":"script","properties":{"body":"// Configure these three params\nconst TOPIC = 'Error getting user info';\nconst PREVNAME = 'GetFullUser';\nconst RECIPIENT = config.CEEmail;\nconst LASTSTEP = steps[PREVNAME];\n\ndone(errorNotification(TOPIC, LASTSTEP, PREVNAME, config.shouldSendEmail));\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n\tlet returnObj = {};\n\n\treturnObj.subject = `CE: ${errorMessage}`;\n\treturnObj.msg = `<b>Error Message:</b> ${errorMessage}`;\n\treturnObj.msg += `<br>Formula Name: ${info.formulaName}`;\n\n\tif (prevStep) {\n\t\treturnObj.msg += `<br>Terminated at step: ${prevStepName}`;\n\t}\n\n\treturnObj.msg += `<br>Formula ID: ${info.formulaId}`;\n\treturnObj.msg += `<br>Formula Instance ID: ${info.formulaInstanceId}`;\n\treturnObj.msg += `<br>Formula Execution ID: ${info.formulaExecutionId}`;\n\n\tif (prevStep) {\n\t\tlet reqURI = getObjValue(prevStep, 'request.uri');\n\t\treturnObj.msg += reqURI ? `<br>Request URL: ${reqURI}` : '';\n\n\t\tlet reqStatus = getObjValue(prevStep, 'response.code');\n\t\treturnObj.msg += reqStatus ? `<br>Response Status: ${reqStatus}` : '';\n\n\t\tlet reqMessage = getObjValue(prevStep, 'response.body.message');\n\t\tlet reqMessageLength = getObjValue(prevStep, 'response.body.message.length');\n\n\t\treturnObj.msg += reqMessage ? `<br>Response Error Message: ${reqMessage.substr(0, 500)}${reqMessageLength > 500 ? '...' : ''}` : '';\n\t}\n\n\treturnObj.msg += \"<br>---------------------------------------------------\";\n\n\tif (shouldEmail) {\n\t\tnotify.email(RECIPIENT, returnObj.subject, returnObj.msg);\n\t\treturnObj.sentEmail = true;\n\t} else {\n\t\treturnObj.sentEmail = false;\n\t}\n\n\treturnObj.notifyTo = RECIPIENT;\n\treturnObj.success = true;\n\n\treturn returnObj;\n}\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591920,"onSuccess":[],"onFailure":[],"name":"SendGetInstanceError","type":"script","properties":{"body":"// Configure these three params\nconst TOPIC = 'Error retrieving getting CE instance';\nconst PREVNAME = steps.doElement.continue ? 'GetInstanceSwagger' : 'GetFormula';\nconst RECIPIENT = config.CEEmail;\nconst LASTSTEP = steps[PREVNAME];\n\ndone(errorNotification(TOPIC, LASTSTEP, PREVNAME, config.shouldSendEmail));\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n\tlet returnObj = {};\n\n\treturnObj.subject = `CE: ${errorMessage}`;\n\treturnObj.msg = `<b>Error Message:</b> ${errorMessage}`;\n\treturnObj.msg += `<br>Formula Name: ${info.formulaName}`;\n\n\tif (prevStep) {\n\t\treturnObj.msg += `<br>Terminated at step: ${prevStepName}`;\n\t}\n\n\treturnObj.msg += `<br>Formula ID: ${info.formulaId}`;\n\treturnObj.msg += `<br>Formula Instance ID: ${info.formulaInstanceId}`;\n\treturnObj.msg += `<br>Formula Execution ID: ${info.formulaExecutionId}`;\n\n\tif (prevStep) {\n\t\tlet reqURI = getObjValue(prevStep, 'request.uri');\n\t\treturnObj.msg += reqURI ? `<br>Request URL: ${reqURI}` : '';\n\n\t\tlet reqStatus = getObjValue(prevStep, 'response.code');\n\t\treturnObj.msg += reqStatus ? `<br>Response Status: ${reqStatus}` : '';\n\n\t\tlet reqMessage = getObjValue(prevStep, 'response.body.message');\n\t\tlet reqMessageLength = getObjValue(prevStep, 'response.body.message.length');\n\n\t\treturnObj.msg += reqMessage ? `<br>Response Error Message: ${reqMessage.substr(0, 500)}${reqMessageLength > 500 ? '...' : ''}` : '';\n\t}\n\n\treturnObj.msg += \"<br>---------------------------------------------------\";\n\n\tif (shouldEmail) {\n\t\tnotify.email(RECIPIENT, returnObj.subject, returnObj.msg);\n\t\treturnObj.sentEmail = true;\n\t} else {\n\t\treturnObj.sentEmail = false;\n\t}\n\n\treturnObj.notifyTo = RECIPIENT;\n\treturnObj.success = true;\n\n\treturn returnObj;\n}\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591938,"onSuccess":[],"onFailure":[],"name":"SendGetOrgForCurrentUserErrorNotification","type":"script","properties":{"body":"// Configure these three params\nconst TOPIC = 'Error retrieving org info';\nconst PREVNAME = 'GetOrgForCurrentUser';\nconst RECIPIENT = config.CEEmail;\nconst LASTSTEP = steps[PREVNAME];\n\ndone(errorNotification(TOPIC, LASTSTEP, PREVNAME, config.shouldSendEmail));\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n\tlet returnObj = {};\n\n\treturnObj.subject = `CE: ${errorMessage}`;\n\treturnObj.msg = `<b>Error Message:</b> ${errorMessage}`;\n\treturnObj.msg += `<br>Formula Name: ${info.formulaName}`;\n\n\tif (prevStep) {\n\t\treturnObj.msg += `<br>Terminated at step: ${prevStepName}`;\n\t}\n\n\treturnObj.msg += `<br>Formula ID: ${info.formulaId}`;\n\treturnObj.msg += `<br>Formula Instance ID: ${info.formulaInstanceId}`;\n\treturnObj.msg += `<br>Formula Execution ID: ${info.formulaExecutionId}`;\n\n\tif (prevStep) {\n\t\tlet reqURI = getObjValue(prevStep, 'request.uri');\n\t\treturnObj.msg += reqURI ? `<br>Request URL: ${reqURI}` : '';\n\n\t\tlet reqStatus = getObjValue(prevStep, 'response.code');\n\t\treturnObj.msg += reqStatus ? `<br>Response Status: ${reqStatus}` : '';\n\n\t\tlet reqMessage = getObjValue(prevStep, 'response.body.message');\n\t\tlet reqMessageLength = getObjValue(prevStep, 'response.body.message.length');\n\n\t\treturnObj.msg += reqMessage ? `<br>Response Error Message: ${reqMessage.substr(0, 500)}${reqMessageLength > 500 ? '...' : ''}` : '';\n\t}\n\n\treturnObj.msg += \"<br>---------------------------------------------------\";\n\n\tif (shouldEmail) {\n\t\tnotify.email(RECIPIENT, returnObj.subject, returnObj.msg);\n\t\treturnObj.sentEmail = true;\n\t} else {\n\t\treturnObj.sentEmail = false;\n\t}\n\n\treturnObj.notifyTo = RECIPIENT;\n\treturnObj.success = true;\n\n\treturn returnObj;\n}\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591937,"onSuccess":[],"onFailure":[],"name":"SendPrepAccessTokenRequestErrorNotification","type":"script","properties":{"body":"// Configure these three params\nconst TOPIC = 'Error formatting Access Token request';\nconst PREVNAME = 'PrepAccessTokenRequest';\nconst RECIPIENT = config.CEEmail;\nconst LASTSTEP = steps[PREVNAME];\n\ndone(errorNotification(TOPIC, LASTSTEP, PREVNAME, config.shouldSendEmail));\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n\tlet returnObj = {};\n\n\treturnObj.subject = `CE: ${errorMessage}`;\n\treturnObj.msg = `<b>Error Message:</b> ${errorMessage}`;\n\treturnObj.msg += `<br>Formula Name: ${info.formulaName}`;\n\n\tif (prevStep) {\n\t\treturnObj.msg += `<br>Terminated at step: ${prevStepName}`;\n\t}\n\n\treturnObj.msg += `<br>Formula ID: ${info.formulaId}`;\n\treturnObj.msg += `<br>Formula Instance ID: ${info.formulaInstanceId}`;\n\treturnObj.msg += `<br>Formula Execution ID: ${info.formulaExecutionId}`;\n\n\tif (prevStep) {\n\t\tlet reqURI = getObjValue(prevStep, 'request.uri');\n\t\treturnObj.msg += reqURI ? `<br>Request URL: ${reqURI}` : '';\n\n\t\tlet reqStatus = getObjValue(prevStep, 'response.code');\n\t\treturnObj.msg += reqStatus ? `<br>Response Status: ${reqStatus}` : '';\n\n\t\tlet reqMessage = getObjValue(prevStep, 'response.body.message');\n\t\tlet reqMessageLength = getObjValue(prevStep, 'response.body.message.length');\n\n\t\treturnObj.msg += reqMessage ? `<br>Response Error Message: ${reqMessage.substr(0, 500)}${reqMessageLength > 500 ? '...' : ''}` : '';\n\t}\n\n\treturnObj.msg += \"<br>---------------------------------------------------\";\n\n\tif (shouldEmail) {\n\t\tnotify.email(RECIPIENT, returnObj.subject, returnObj.msg);\n\t\treturnObj.sentEmail = true;\n\t} else {\n\t\treturnObj.sentEmail = false;\n\t}\n\n\treturnObj.notifyTo = RECIPIENT;\n\treturnObj.success = true;\n\n\treturn returnObj;\n}\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591933,"onSuccess":[],"onFailure":[],"name":"SendSendDeleteEventError","type":"script","properties":{"body":"// Configure these three params\r\nconst TOPIC = 'Error sending delete event';\r\nconst PREVNAME = 'SendDeleteEvent';\r\nconst RECIPIENT = config.email;\r\nconst LASTSTEP = steps[PREVNAME];\r\n\r\ndone(errorNotification(TOPIC, LASTSTEP, PREVNAME, config.shouldSendEmail));\r\n\r\n/**\r\n * Sends an email with the given error message to the user's email-address.\r\n * @param errorMessage The message to be appended to the email\r\n * @param prevStep The data from previous step, used to populate the errorMessage\r\n * @param prevStepName The name of the step where the formula was before failure.\r\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \r\n * @return The message and body to be displayed in the execution.\r\n */\r\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\r\n\tlet returnObj = {};\r\n\r\n\treturnObj.subject = `CE: ${errorMessage}`;\r\n\treturnObj.msg = `<b>Error Message:</b> ${errorMessage}`;\r\n\treturnObj.msg += `<br>Formula Name: ${info.formulaName}`;\r\n\r\n\tif (prevStep) {\r\n\t\treturnObj.msg += `<br>Terminated at step: ${prevStepName}`;\r\n\t}\r\n\r\n\treturnObj.msg += `<br>Formula ID: ${info.formulaId}`;\r\n\treturnObj.msg += `<br>Formula Instance ID: ${info.formulaInstanceId}`;\r\n\treturnObj.msg += `<br>Formula Execution ID: ${info.formulaExecutionId}`;\r\n\treturnObj.msg += `<br>TenantId: ${steps.GetFullAccount.response.body.externalId.split('|',1)[0]}`;\r\n\r\n\tlet reqStatus;\r\n\tif (prevStep) {\r\n\t\tlet reqURI = getObjValue(prevStep, 'request.uri');\r\n\t\treturnObj.msg += reqURI ? `<br>Request URL: ${reqURI}` : '';\r\n\r\n\t\treqStatus = getObjValue(prevStep, 'response.code');\r\n\t\treturnObj.msg += reqStatus ? `<br>Response Status: ${reqStatus}` : '';\r\n\r\n\t\tlet reqMessage = getObjValue(prevStep, 'response.body.message');\r\n\t\tlet reqMessageLength = getObjValue(prevStep, 'response.body.message.length');\r\n\r\n\t\treturnObj.msg += reqMessage ? `<br>Response Error Message: ${reqMessage.substr(0, 500)}${reqMessageLength > 500 ? '...' : ''}` : '';\r\n\t\t\r\n\t\tlet transactionId = getObjValue(prevStep, 'response.headers');\r\n\t\ttransactionId = transactionId && transactionId['x-axway-transaction-id']\r\n\t\treturnObj.msg += transactionId ? `<br>TransactionID: ${transactionId}` : '';\r\n\t}\r\n\r\n\treturnObj.msg += \"<br>---------------------------------------------------\";\r\n\r\n\tif (shouldEmail && String(reqStatus) !== '404') {\r\n\t\tnotify.email(RECIPIENT, returnObj.subject, returnObj.msg);\r\n\t\treturnObj.sentEmail = true;\r\n\t} else {\r\n\t\treturnObj.sentEmail = false;\r\n\t}\r\n\r\n\treturnObj.notifyTo = RECIPIENT;\r\n\treturnObj.success = true;\r\n\r\n\treturn returnObj;\r\n}\r\n\r\nfunction getObjValue(obj, key) {\r\n\treturn key.split('.').reduce((o, x) => {\r\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\r\n\t}, obj);\r\n}"}},{"id":591910,"onSuccess":[],"onFailure":[],"name":"SendSendEventErrorNotification","type":"script","properties":{"body":"// Configure these params\nconst TOPIC = 'Error sending event to proxy registration server';\nconst PREVNAME = 'SendEvent';\nconst RECIPIENT = config.email;\nconst PREVSTEP = steps[PREVNAME];\n\ndone(errorNotification(TOPIC, PREVSTEP, PREVNAME, config.shouldSendEmail));\n\n\n// This code is different than the other fails\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n\tlet returnObj = {};\n\tlet resCode = getObjValue(prevStep, 'response.code');\n\tresCode = resCode ? `${resCode} ` : null;\n\n\t// Subject\n\treturnObj.subject = `CE: ${resCode ? resCode : ''}${errorMessage}`;\n\n\t// Body\n\tlet resBody = getObjValue(prevStep, 'response.body');\n\tlet stringifiedBody;\n\ttry {\n\t\tif (resBody) {\n\t\t\tstringifiedBody = JSON.stringify(resBody, null, 2);\n\t\t\terrorMessage += '<br/>';\n\t\t\terrorMessage += '<pre>';\n\t\t\terrorMessage += stringifiedBody;\n\t\t\terrorMessage += '</pre>';\n\t\t}\n\t} catch (e) {\n\t\t// do nothing\n\t}\n\treturnObj.msg = `<b>Error Message:</b> ${errorMessage}`;\n\treturnObj.msg += `<br>Formula Name: ${info.formulaName}`;\n\treturnObj.msg += prevStep ? `<br>Terminated at step: ${prevStepName}` : '';\n\n\treturnObj.msg += `<br>Formula ID: ${info.formulaId}`;\n\treturnObj.msg += `<br>Formula Instance ID: ${info.formulaInstanceId}`;\n\treturnObj.msg += `<br>Formula Execution ID: ${info.formulaExecutionId}`;\n\treturnObj.msg += `<br>Instance ID: ${trigger.response.body.id}`;\n\treturnObj.msg += `<br>Element ID: ${trigger.response.body.elementId}`;\n\treturnObj.msg += `<br>Method: ${config.eventMethod}`;\n\treturnObj.msg += `<br>TenantId: ${steps.GetFullAccount.response.body.externalId.split('|',1)[0]}`;\n  \n\tlet reqStatus = getObjValue(prevStep, 'response.code');\n\tif (prevStep) {\n\t\tlet reqURI = getObjValue(prevStep, 'request.uri');\n\t\treturnObj.msg += reqURI ? `<br>Request URL: ${reqURI}` : '';\n\t\treturnObj.msg += reqStatus ? `<br>Response Status: ${reqStatus}` : '';\n\t\t\n\t\tlet transactionId = getObjValue(prevStep, 'response.headers');\n\t\ttransactionId = transactionId && transactionId['x-axway-transaction-id']\n\t\treturnObj.msg += transactionId ? `<br>TransactionID: ${transactionId}` : '';\n\t\t\n\t}\n\t\n\treturnObj.msg += \"<br>---------------------------------------------------\";\t\n\n\tif (shouldEmail && (reqStatus == 400) && (stringifiedBody || '').includes(\"Request validation failed\")) {\n\t  // Email CE if we CE sent dirty data\n\t  notify.email(config.CEEmail, returnObj.subject, returnObj.msg);\n\t  returnObj.sentEmail = true;\n\t  returnObj.notifyTo = config.CEEmail;\n\t} else if (shouldEmail && reqStatus ==\t404 && config.eventMethod == 'PUT') {\n\t  // Don't email if we get 404 on update. It is trying to update old proxy\n\t} else if (shouldEmail) {\n\t  // Email pagerduty for any other issue\n\t  notify.email(RECIPIENT, returnObj.subject, returnObj.msg);\n\t  returnObj.sentEmail = true;\n\t  returnObj.notifyTo = RECIPIENT;\n\t} else {\n\t  returnObj.sentEmail = false;\n\t}\n\t\n\treturnObj.success = false;\t\n\treturn returnObj; \n}\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591903,"onSuccess":["doElement"],"onFailure":["formatDelete"],"name":"skipDelete","type":"filter","properties":{"body":"if(config.eventMethod === \"DELETE\") {\n  done(false)\n} else {\n  done(true)\n}"}},{"id":591918,"onSuccess":[],"onFailure":[],"name":"Unexpected200Response","type":"script","properties":{"body":"// Configure these three params\nconst TOPIC = 'Error retrieving getting CE instance';\nconst PREVNAME = 'GetInstance';\nconst RECIPIENT = config.CEEmail;\nconst LASTSTEP = steps[PREVNAME];\n\ndone(errorNotification(TOPIC, LASTSTEP, PREVNAME, config.shouldSendEmail));\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n\tlet returnObj = {};\n\n\treturnObj.subject = `CE: ${errorMessage}`;\n\treturnObj.msg = `<b>Error Message:</b> ${errorMessage}`;\n\treturnObj.msg += `<br>Formula Name: ${info.formulaName}`;\n\n\tif (prevStep) {\n\t\treturnObj.msg += `<br>Terminated at step: ${prevStepName}`;\n\t}\n\n\treturnObj.msg += `<br>Formula ID: ${info.formulaId}`;\n\treturnObj.msg += `<br>Formula Instance ID: ${info.formulaInstanceId}`;\n\treturnObj.msg += `<br>Formula Execution ID: ${info.formulaExecutionId}`;\n\n\tif (prevStep) {\n\t\tlet reqURI = getObjValue(prevStep, 'request.uri');\n\t\treturnObj.msg += reqURI ? `<br>Request URL: ${reqURI}` : '';\n\n\t\tlet reqStatus = getObjValue(prevStep, 'response.code');\n\t\treturnObj.msg += reqStatus ? `<br>Response Status: ${reqStatus}` : '';\n\n\t\tlet reqMessage = getObjValue(prevStep, 'response.body.message');\n\t\tlet reqMessageLength = getObjValue(prevStep, 'response.body.message.length');\n\n\t\treturnObj.msg += reqMessage ? `<br>Response Error Message: ${reqMessage.substr(0, 500)}${reqMessageLength > 500 ? '...' : ''}` : '';\n\t}\n\n\treturnObj.msg += \"<br>---------------------------------------------------\";\n\n\tif (shouldEmail) {\n\t\tnotify.email(RECIPIENT, returnObj.subject, returnObj.msg);\n\t\treturnObj.sentEmail = true;\n\t} else {\n\t\treturnObj.sentEmail = false;\n\t}\n\n\treturnObj.notifyTo = RECIPIENT;\n\treturnObj.success = true;\n\n\treturn returnObj;\n}\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}},{"id":591906,"onSuccess":["isValidSwagger"],"onFailure":["End"],"name":"ValidateSwagger","type":"httpRequest","properties":{"url":"https://staging.cloud-elements.com/irs/validate/swagger/esv","headers":"${steps.InstanceHeaders.headers}","method":"POST","body":"${steps.GetInstanceSwagger.response.body}"}},{"id":591916,"onSuccess":["getSourceTemplate"],"onFailure":[],"name":"wasUnableToFindInstance","type":"filter","properties":{"body":"let { checkDeletedInstance } = steps;\nlet reqStatus = getObjValue(checkDeletedInstance, 'response.code');\n\n\nif (String(reqStatus) === '404') {\n  // The deleted instance wasn't found\n  // Continue to search for the element/flow\n  done(true);\n} else {\n  // The instance was found to be deleted\n  // No action required\n  done(false);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction getObjValue(obj, key) {\n\treturn key.split('.').reduce((o, x) => {\n\t\treturn (typeof o === 'undefined' || o === null) ? o : o[x];\n\t}, obj);\n}"}}],"triggers":[{"id":54593,"onSuccess":["CheckStatus"],"onFailure":[],"type":"request","async":true,"active":true,"name":"trigger","properties":{"level":"customer","method":"${config.eventMethod}","api":"${config.eventPath}"}}],"engine":"v3","active":true,"debugLoggingEnabled":false,"singleThreaded":false,"configuration":[{"id":103940,"key":"CEEmail","name":"CEEmail","type":"value","required":true},{"id":103941,"key":"CEEnvironment","name":"CEEnvironment","type":"value","required":true},{"id":103942,"key":"email","name":"email","type":"value","required":true},{"id":103943,"key":"eventMethod","name":"eventMethod","type":"value","required":true},{"id":103944,"key":"eventPath","name":"eventPath","type":"value","required":true},{"id":103945,"key":"openid_clientid","name":"openid_clientid","type":"value","required":true},{"id":103946,"key":"openid_client_secret","name":"openid_client_secret","type":"value","required":true},{"id":103947,"key":"openid_uri","name":"openid_uri","type":"value","required":true},{"id":103948,"key":"proxyEndpointUrl","name":"proxyEndpointUrl","type":"value","required":true},{"id":103949,"key":"shouldSendEmail","name":"shouldSendEmail","type":"value","required":true}]}