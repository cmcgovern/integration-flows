{"id":67357,"name":"Metrics","debugLoggingExpires":"2019-11-22T05:34:34Z","userId":87717,"accountId":62974,"createdDate":"2021-11-30T13:45:52Z","steps":[{"id":591783,"onSuccess":["PrepareData"],"onFailure":["SendGetMetricsErrorNotification"],"name":"CheckIfSuccessful","type":"filter","properties":{"body":"done(steps.GetAPIMetrics.response.code == 200)"}},{"id":591800,"onSuccess":[],"onFailure":[],"name":"dumpData","type":"script","properties":{"body":"done(steps.PrepareData)"}},{"id":591780,"onSuccess":["CheckIfSuccessful"],"onFailure":[],"name":"GetAPIMetrics","type":"request","properties":{"retryDelay":"500","retryStatusCodes":"400-499","retry":"true","api":"/metrics/api","method":"GET","acceptableStatusCodes":"500","query":"${steps.PrepareToGetMetrics}","retryAttempts":"5"}},{"id":591776,"onSuccess":["PrepareToGetMetrics"],"onFailure":[],"name":"GetTimestamps","type":"script","properties":{"body":"const now = new Date()\nconst today = new Date(now)\ntoday.setUTCHours(0)\ntoday.setUTCMinutes(0)\ntoday.setUTCSeconds(0)\ntoday.setUTCMilliseconds(0)\nconst yesterday = new Date(today)\nyesterday.setDate(today.getDate()-1)\n\ndone({\n  from: yesterday,\n  to: today\n});"}},{"id":591797,"onSuccess":["dumpData"],"onFailure":[],"name":"GetValidationMetrics","type":"request","properties":{"retryDelay":"500","retryStatusCodes":"400-499","retry":"true","api":"/metrics/api","method":"GET","acceptableStatusCodes":"500","query":"${steps.PrepareToGetValidationMetrics}","retryAttempts":"5"}},{"id":591787,"onSuccess":["SendMetric"],"onFailure":["PrepareToGetValidationMetrics"],"name":"LoopThroughMetrics","type":"loop","properties":{"list":"${steps.PrepareData.metrics}"}},{"id":591786,"onSuccess":["LoopThroughMetrics"],"onFailure":[],"name":"PrepareData","type":"script","properties":{"body":"const orgs = steps.GetAPIMetrics.response.body\nconst startTime = new Date(steps.GetTimestamps.from).getTime()\n\nlet metrics = []\n\nfor (let org of orgs) {\n  if (!org.externalId || !org.externalId.toString().includes('|')) {\n    continue;\n  }\n\n  if (org.count === 0) {\n    continue;\n  }\n\n  const values = org.metrics.map(metric => {\n    const platformDetails = metric.details ? metric.details.find(detail => detail.type === 'platform') : null\n    const platformCount = platformDetails ? platformDetails.count : 0\n    return metric.count - platformCount\n  })\n\n  metrics = metrics.concat(values.map((value, index) => {\n    const timestamp = startTime + index*60*60*1000\n    const app = org.externalId.split('|')[0]\n    const event = 'usage.ai.transactions'\n    const id = CE.md5(`${timestamp}-${app}-${event}`)\n    return {\n      id: id,\n      timestamp: timestamp,\n      app: app,\n      event: event,\n      version: config.version.toString(),\n      distribution: {\n        environment: config.environment,\n        version: '1.0'\n      },\n      data: {\n        value: value,\n        abs: false,\n        observedStart: timestamp,\n        observedEnd: timestamp + 60*60*1000\n      }\n    }\n  }))\n}\n\nconst summary = {}\n\nfor (let metric of metrics) {\n  if (summary[metric.app]) {\n    summary[metric.app] += metric.data.value\n  } else {\n    summary[metric.app] = metric.data.value\n  }\n}\n\ndone({metrics, summary});"}},{"id":591779,"onSuccess":["GetAPIMetrics"],"onFailure":[],"name":"PrepareToGetMetrics","type":"script","properties":{"body":"done({\n  \"customerIds[]\": config.customer,\n  from: steps.GetTimestamps.from,\n  to: steps.GetTimestamps.to,\n  agg: 'org',\n  interval: 'hour',\n  emptyIntervals: true,\n  pageSize: 1000\n})\n"}},{"id":591796,"onSuccess":["GetValidationMetrics"],"onFailure":[],"name":"PrepareToGetValidationMetrics","type":"script","properties":{"body":"done({\n  \"customerIds[]\": config.customer,\n  from: steps.GetTimestamps.from,\n  to: steps.GetTimestamps.to,\n  agg: 'org',\n  interval: 'day',\n  emptyIntervals: false,\n  pageSize: 1000\n})\n"}},{"id":591802,"onSuccess":[],"onFailure":[],"name":"SendGetMetricsErrorNotification","type":"script","properties":{"body":"notify.email(config.email, 'Error getting metrics', steps.GetAPIMetrics.response)\ndone({done: true})"}},{"id":591790,"onSuccess":["LoopThroughMetrics"],"onFailure":["SendSendMetricErrorNotification"],"name":"SendMetric","type":"httpRequest","properties":{"url":"${config.endpoint}","retryDelay":"500","body":"${steps.LoopThroughMetrics.entry}","retryStatusCodes":"400-499","retry":"true","method":"POST","retryAttempts":"5"}},{"id":591794,"onSuccess":["LoopThroughMetrics"],"onFailure":[],"name":"SendSendMetricErrorNotification","type":"script","properties":{"body":"notify.email(config.email, 'Error sending metrics', steps.SendMetric.response)\ndone({done: true})"}}],"triggers":[{"id":54587,"onSuccess":["GetTimestamps"],"onFailure":[],"type":"scheduled","async":true,"active":true,"name":"trigger","properties":{"cron":"0 10 0 1/1 * ? *"}}],"engine":"v3","active":true,"debugLoggingEnabled":false,"singleThreaded":false,"configuration":[{"id":103904,"key":"customer","name":"customer","type":"value","required":true},{"id":103905,"key":"email","name":"email","type":"value","required":true},{"id":103906,"key":"endpoint","name":"endpoint","type":"value","required":true},{"id":103907,"key":"environment","name":"environment","type":"value","required":true},{"id":103908,"key":"version","name":"version","type":"value","required":true}]}