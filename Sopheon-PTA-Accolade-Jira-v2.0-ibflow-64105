{"id":64105,"name":"Sopheon-PTA-Accolade-Jira-v2.0","description":"Creates/updates Jira epics and updates Accolade project metrics. Uses scheduled trigger.","debugLoggingExpires":"2021-09-27T20:16:15Z","userId":87717,"accountId":62974,"createdDate":"2021-10-12T14:36:50Z","steps":[{"id":576174,"onSuccess":["isJiraFieldsCacheOutdated"],"onFailure":[],"description":"Defaults are based on A4SP 1.x metric system names.\n\nTODO: define Jira project requirements (required epic fields).\nTODO: figure out how to disable/mitigate webhook events/calls into Amplify when doing polling\nTODO: describe how to configure instance ","name":"cacheConfiguration","type":"script","properties":{"body":"// Helper: check if value is an object.\r\nconst isObject = o => typeof o === 'object' && o !== null && !Array.isArray(o);\r\n\r\n// Helper: remove all falsy and not supported properties from an object.\r\nconst cleanObject = (o, keys) => {\r\n  for (const key of keys)\r\n    if (!o[key]) delete o[key];\r\n  return o;\r\n};\r\n\r\n// Helper: merge objects.\r\nconst mergeObjects = (o, d) => cleanObject(Object.assign(d, isObject(o) ? o : {}), Object.keys(d));\r\n\r\n// Merge configuration with EPIC defaults.\r\nconst epicProperties = mergeObjects(config.epicProperties, {\r\n  status: \"strExternalStatus\",\r\n  issueCount: \"numIssues\",\r\n  issuesCompleted: \"numIssuesCompleted\",\r\n  issuesWithoutStoryPoints: \"numIssuesWithoutStoryPoints\",\r\n  totalStoryPoints: \"numTotalStoryPoints\",\r\n  completedStoryPoints: \"numCompletedStoryPoints\",\r\n  totalProgress: \"numTotalProgress\"\r\n});\r\n\r\n// Merge configuration with Project defaults.\r\nconst projectProperties = mergeObjects(config.projectProperties, {\r\n  jiraProjectId: \"strExternalProjectIdentifier\",\r\n  jiraEpicId: \"strExternalEpicIdentifier\",\r\n  description: \"losEPIC\"\r\n});\r\n\r\n// Replace default Filter with configuration if defined.\r\nconst projectFilter = isObject(config.projectFilter) && Object.keys(config.projectFilter).length > 0 ? config.projectFilter : {\r\n  numIntegrated: \"'Yes'\",\r\n  lisExternalType: \"'Jira'\",\r\n  strExternalProjectIdentifier: [true, \"LEN({0})>0\"]\r\n};\r\n\r\nconfig.cache = Object.assign(config.cache || {}, {\r\n  epicProperties,\r\n  projectProperties,\r\n  projectFilter\r\n});\r\n\r\ndone({});"}},{"id":576173,"onSuccess":["prepareGetIntegratedProjects"],"onFailure":[],"description":"","name":"cacheJiraFields","type":"script","properties":{"body":"const now = Date.now();\nconst timeouts = Object.assign({\n  jiraFields: 86400000 // 24 hours\n}, config.timeouts || {});\n\nconst jiraFields = steps.getJiraFields.response.body\n  .filter(field => [\"Story Points\", \"Epic Link\", \"Epic Name\"].includes(field.name))\n  .reduce((customNames, field) => (customNames[field.name] = field.key, customNames), {});\nconst jiraFieldsTtl = timeouts.jiraFields + now;\n\nconfig.cache =  Object.assign(config.cache || {}, {\n   jiraFields,\n  jiraFieldsTtl\n});\n\ndone({});"}},{"id":576172,"onSuccess":["prepareUpdateEpicIdMetric"],"onFailure":["loopIntegratedProjects"],"name":"createJiraEpic","type":"elementRequest","properties":{"method":"POST","api":"/incidents","body":"${steps.prepareCreateJiraEpic.body}","elementInstanceId":"${config.jira}"}},{"id":576171,"onSuccess":["prepareGetJiraEpicIssues"],"onFailure":[],"name":"getEpic","type":"script","properties":{"body":"const jiraEpic = steps.getJiraEpic.response.body;\n\nconst epic = {\n  ...config.cache.epicProperties\n};\n\nif (\"status\" in epic) {\n  epic.status = jiraEpic.fields.status.name;\n}\n\nif (\"issueCount\" in epic) {\n  epic.issueCount = 0;\n}\n\nif (\"issuesCompleted\" in epic) {\n  epic.issuesCompleted = 0;\n}\n\nif (\"issuesWithoutStoryPoints\" in epic) {\n  epic.issuesWithoutStoryPoints = 0;\n}\n\nif (\"totalStoryPoints\" in epic) {\n  epic.totalStoryPoints = 0; \n}\n\nif (\"completedStoryPoints\" in epic) {\n  epic.completedStoryPoints = 0; \n}\n\nif (\"totalProgress\" in epic) {\n  epic.totalProgress = 0; \n}\n\ndone(epic);"}},{"id":576170,"onSuccess":["loopIntegratedProjects"],"onFailure":[],"name":"getIntegratedProjects","type":"elementRequest","properties":{"method":"GET","api":"/executequery","elementInstanceId":"${config.accolade}","query":"${steps.prepareGetIntegratedProjects.query}"}},{"id":576169,"onSuccess":["updateEpicProperties"],"onFailure":[],"name":"getIssue","type":"script","properties":{"body":"const jiraIssue = steps.loopJiraEpicIssues.entry;\nconst storyPointsField = config.cache.jiraFields[\"Story Points\"];\n\ndone({\n  status: jiraIssue.fields.status.name,\n  storyPoints: jiraIssue.fields[storyPointsField]\n});"}},{"id":576168,"onSuccess":["isProjectChanged"],"onFailure":["isJiraEpicNotFound"],"name":"getJiraEpic","type":"elementRequest","properties":{"method":"GET","api":"/incidents/${steps.getProject.jiraEpicId}","elementInstanceId":"${config.jira}"}},{"id":576167,"onSuccess":["loopJiraEpicIssues"],"onFailure":["loopIntegratedProjects"],"name":"getJiraEpicIssues","type":"elementRequest","properties":{"method":"GET","api":"/incidents","elementInstanceId":"${config.jira}","query":"${steps.prepareGetJiraEpicIssues.query}"}},{"id":576166,"onSuccess":["cacheJiraFields"],"onFailure":[],"name":"getJiraFields","type":"elementRequest","properties":{"method":"GET","api":"/fields","elementInstanceId":"${config.jira}"}},{"id":576165,"onSuccess":["hasEpicIdentifier"],"onFailure":[],"name":"getProject","type":"script","properties":{"body":"const project = steps.loopIntegratedProjects.entry;\nconst metrics = steps.getProjectMetrics.response.body.metrics;\n\nconst properties = {\n  ...config.cache.projectProperties,\n  ...config.cache.epicProperties\n};\n\nfor (const propertyName of Object.keys(properties)) {\n  const systemName = properties[propertyName];\n  const metric = metrics.find(item => item.systemName === systemName);\n  properties[propertyName] = metric ? metric.value : null;\n}\n\ndone({\n  ...project,\n  ...properties\n});"}},{"id":576164,"onSuccess":["getProject"],"onFailure":[],"name":"getProjectMetrics","type":"elementRequest","properties":{"method":"GET","api":"/projects/${steps.loopIntegratedProjects.entry.projectId}/metrics","elementInstanceId":"${config.accolade}"}},{"id":576163,"onSuccess":["loopProjectMetricUpdates"],"onFailure":[],"name":"getProjectMetricUpdates","type":"script","properties":{"body":"const properties = config.cache.epicProperties;\nconst project = steps.getProject;\nconst epic = steps.getEpic;\n\nconst metricUpdates = [];\nfor (const propertyName of Object.keys(properties)) {\n  if (project[propertyName] !== epic[propertyName]) {\n    metricUpdates.push({\n      systemName: properties[propertyName],\n      value: epic[propertyName]\n    });\n  }\n}\n\ndone(metricUpdates);"}},{"id":576162,"onSuccess":["getJiraEpic"],"onFailure":["prepareCreateJiraEpic"],"description":"","name":"hasEpicIdentifier","type":"filter","properties":{"body":"const project = steps.getProject;\nconst hasEpicId = !!project.jiraEpicId;\nconst epicBelongsToProject = hasEpicId && project.jiraEpicId.startsWith(project.jiraProjectId);\n\ndone(hasEpicId && epicBelongsToProject);"}},{"id":576161,"onSuccess":["prepareCreateJiraEpic"],"onFailure":["loopIntegratedProjects"],"name":"isJiraEpicNotFound","type":"filter","properties":{"body":"done(steps.getJiraEpic.response.code === 404);"}},{"id":576160,"onSuccess":["prepareGetIntegratedProjects"],"onFailure":["getJiraFields"],"name":"isJiraFieldsCacheOutdated","type":"filter","properties":{"body":"done(config.cache && config.cache.jiraFieldsTtl >= Date.now());"}},{"id":576159,"onSuccess":["prepareUpdateJiraEpic"],"onFailure":["getEpic"],"description":"","name":"isProjectChanged","type":"filter","properties":{"body":"const project = steps.getProject;\nconst jiraEpic = steps.getJiraEpic.response.body;\nconst epicNameField = config.cache.jiraFields[\"Epic Name\"];\n\ndone(jiraEpic.description !== project.description ||\n  jiraEpic.summary !== project.projectName ||\n  jiraEpic.fields[epicNameField] !== project.projectName);"}},{"id":576158,"onSuccess":["getProjectMetrics"],"onFailure":[],"name":"loopIntegratedProjects","type":"loop","properties":{"list":"${steps.getIntegratedProjects.response.body}"}},{"id":576157,"onSuccess":["getIssue"],"onFailure":["getProjectMetricUpdates"],"name":"loopJiraEpicIssues","type":"loop","properties":{"list":"${steps.getJiraEpicIssues.response.body}"}},{"id":576156,"onSuccess":["prepareUpdateProjectMetric"],"onFailure":["loopIntegratedProjects"],"name":"loopProjectMetricUpdates","type":"loop","properties":{"list":"${steps.getProjectMetricUpdates}"}},{"id":576155,"onSuccess":["createJiraEpic"],"onFailure":[],"name":"prepareCreateJiraEpic","type":"script","properties":{"body":"const project = steps.getProject;\nconst epicNameField = config.cache.jiraFields[\"Epic Name\"];\n\nconst incident = {\n  fields: {\n    project: {\n      key: project.jiraProjectId\n    },\n    issuetype: {\n      name: \"Epic\"\n    },\n    summary: project.projectName,\n    description: project.description\n  }\n};\nincident.fields[epicNameField] =  project.projectName;\n\ndone({\n  body: incident\n});"}},{"id":576154,"onSuccess":["getIntegratedProjects"],"onFailure":[],"description":"","name":"prepareGetIntegratedProjects","type":"script","properties":{"body":"const filter = config.cache.projectFilter;\r\n\r\nconst selectClause = \"SELECT P.SysProjectID AS ProjectId,P.ProjectName\";\r\nlet fromClause = \"FROM RVP_Projects P\";\r\nlet whereClause = \"WHERE P.ProjectClosed=0\"; // project not closed\r\n\r\nlet alias = \"A\";\r\nfor (const systemName of Object.keys(filter)) {\r\n  fromClause += `,RVP_ProjectMetrics ${alias}`;\r\n\r\n  whereClause += ` AND ${alias}.SysProjectID=P.SysProjectID`;\r\n  whereClause += ` AND ${alias}.MetricName='${systemName}'`;\r\n\r\n  const value = filter[systemName];\r\n  let andClause = Array.isArray(value) && value[0] === true ?\r\n    value[1].replace(\"{0}\", `${alias}.MetricValue`) :\r\n    `${alias}.MetricValue=${value}`;\r\n  whereClause += ` AND ${andClause}`;\r\n\r\n  alias = String.fromCharCode(alias.charCodeAt(0) + 1);\r\n  if (alias === \"P\") {\r\n    throw new Error(\"Too many project filter metrics.\")\r\n  }\r\n}\r\n\r\ndone({\r\n  query: {\r\n    sql: encodeURIComponent(`${selectClause} ${fromClause} ${whereClause}`)\r\n  }\r\n});"}},{"id":576153,"onSuccess":["getJiraEpicIssues"],"onFailure":[],"description":"","name":"prepareGetJiraEpicIssues","type":"script","properties":{"body":"const epicLinkField = config.cache.jiraFields[\"Epic Link\"];\nconst epicId = steps.getProject.jiraEpicId;\n\nconst query = {\n  where: `${epicLinkField}='${epicId}'`\n}\n\ndone({\n  query\n});"}},{"id":576152,"onSuccess":["updateEpicIdMetric"],"onFailure":[],"name":"prepareUpdateEpicIdMetric","type":"script","properties":{"body":"const project = steps.getProject;\nconst jiraEpic = steps.createJiraEpic.response.body;\nconst epicIdSystemName = config.cache.projectProperties.jiraEpicId;\n\ndone({\n  url: `projects/${project.projectId}/metrics/${epicIdSystemName}`,\n  body: {\n    systemName: epicIdSystemName,\n    value: jiraEpic.key\n  }\n});\n"}},{"id":576151,"onSuccess":["updateJiraEpic"],"onFailure":[],"description":"","name":"prepareUpdateJiraEpic","type":"script","properties":{"body":"const project = steps.getProject;\nconst epicNameField = config.cache.jiraFields[\"Epic Name\"];\n\nconst incident = {\n  fields: {\n    project: {\n      key: project.jiraProjectId\n    },\n    issuetype: {\n      name: \"Epic\"\n    },\n    summary: project.projectName,\n    description: project.description\n  }\n};\nincident.fields[epicNameField] = project.projectName;\n\ndone({\n  epicId: project.jiraEpicId,\n  body: incident\n});\n"}},{"id":576150,"onSuccess":["updateProjectMetric"],"onFailure":[],"name":"prepareUpdateProjectMetric","type":"script","properties":{"body":"const project = steps.getProject;\nconst metricUpdate = steps.loopProjectMetricUpdates.entry;\n\ndone({\n  url: `projects/${project.projectId}/metrics/${metricUpdate.systemName}`,\n  body: metricUpdate\n});"}},{"id":576149,"onSuccess":["loopIntegratedProjects"],"onFailure":["loopIntegratedProjects"],"name":"updateEpicIdMetric","type":"elementRequest","properties":{"method":"PATCH","api":"/${steps.prepareUpdateEpicIdMetric.url}","body":"${steps.prepareUpdateEpicIdMetric.body}","elementInstanceId":"${config.accolade}"}},{"id":576148,"onSuccess":["loopJiraEpicIssues"],"onFailure":[],"name":"updateEpicProperties","type":"script","properties":{"body":"const epic = steps.getEpic;\nconst issue = steps.getIssue;\n\nif (\"issueCount\" in epic) {\n  epic.issueCount++;\n}\n\nif (\"issuesCompleted\" in epic) {\n  if (issue.status === \"Done\") {\n    epic.issuesCompleted++;\n  }\n}\n\nif (\"issuesWithoutStoryPoints\" in epic) {\n  if (!Number.isInteger(issue.storyPoints)) {\n    epic.issuesWithoutStoryPoints++;\n  }\n}\n\nif (\"totalStoryPoints\" in epic) {\n  if (Number.isInteger(issue.storyPoints)) {\n    epic.totalStoryPoints += issue.storyPoints;\n  }\n}\n\nif (\"completedStoryPoints\" in epic) {\n  if (issue.status === \"Done\" && Number.isInteger(issue.storyPoints)) {\n    epic.completedStoryPoints += issue.storyPoints;\n  }\n}\n\nif ((\"totalStoryPoints\" in epic) && (\"completedStoryPoints\" in epic) && (\"totalProgress\" in epic)) {\n  epic.totalProgress = Math.round((epic.completedStoryPoints / epic.totalStoryPoints) * 100);\n}\n\ndone();"}},{"id":576147,"onSuccess":["getEpic"],"onFailure":["getEpic"],"name":"updateJiraEpic","type":"elementRequest","properties":{"method":"PATCH","api":"/incidents/${steps.prepareUpdateJiraEpic.epicId}","body":"${steps.prepareUpdateJiraEpic.body}","elementInstanceId":"${config.jira}"}},{"id":576146,"onSuccess":["loopProjectMetricUpdates"],"onFailure":["loopProjectMetricUpdates"],"name":"updateProjectMetric","type":"elementRequest","properties":{"method":"PATCH","api":"/${steps.prepareUpdateProjectMetric.url}","body":"${steps.prepareUpdateProjectMetric.body}","elementInstanceId":"${config.accolade}"}}],"triggers":[{"id":52559,"onSuccess":["cacheConfiguration"],"onFailure":[],"type":"scheduled","async":true,"active":true,"name":"trigger","properties":{"allowConcurrentExecutions":"false","cron":"0 0/2 * * * ? *"}}],"engine":"v3","active":false,"debugLoggingEnabled":false,"singleThreaded":false,"configuration":[{"id":101253,"key":"accolade","name":"accolade","type":"elementInstance","required":true},{"id":101254,"key":"epicProperties","name":"epicProperties","type":"value","required":false},{"id":101255,"key":"jira","name":"jira","type":"elementInstance","required":true},{"id":101256,"key":"projectFilter","name":"projectFilter","type":"value","required":false},{"id":101257,"key":"projectProperties","name":"projectProperties","type":"value","required":false},{"id":101258,"key":"timeouts","name":"timeouts","type":"value","required":false}]}