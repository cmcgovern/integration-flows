{"id":67360,"name":"6/13/19 - Instance Creation Action","userId":87717,"accountId":62974,"createdDate":"2021-11-30T13:45:52Z","steps":[{"id":591817,"onSuccess":["PrepAccessTokenRequest"],"onFailure":["End"],"name":"CheckOrg","type":"filter","properties":{"body":"const myCompanyId = steps.GetOrgForCurrentUser.response.body.id;\nconst instanceCompanyId = steps.GetFullAccount.response.body.companyId;\n\nif (instanceCompanyId === myCompanyId) {\n  done(false);\n} else {\n  done(true);\n}\n"}},{"id":591806,"onSuccess":["GetFullUser"],"onFailure":["End"],"name":"CheckStatus","type":"filter","properties":{"body":"  if (trigger.response.code === 200) {\n    done(true);\n  } else {\n    done(false);\n  }"}},{"id":591879,"onSuccess":[],"onFailure":[],"name":"End","type":"script","properties":{"body":"done({ success: false });"}},{"id":591844,"onSuccess":["SendEvent"],"onFailure":["SendFormatEventDataErrorNotification"],"name":"FormatEventData","type":"script","properties":{"body":"// Utility function to determine if a provided value exists\nlet exists = (value => value != undefined && value != null);\nlet notAllowed = new RegExp(\"[\\^\\\\w\\\\s\\-\\(\\)\\[\\\\]]\", 'g');\n\nif (exists(trigger.response) &&\n    exists(trigger.response.body) &&\n    exists(trigger.response.body.element) &&\n    exists(trigger.response.body.id) &&\n    exists(trigger.response.body.name) &&\n    exists(trigger.response.body.element.key)) {\n  const maxRPlength = 125;\n  const maxPNlength = 100;\n  const ceInstanceID = trigger.response.body.id;\n  const elementName = trigger.response.body.element.key;\n  const instanceName = trigger.response.body.name;\n  const artifactType = '_connector_';\n  \n  // The resourcePath aka basepath. Needs to be unique so we add env and type\n  let resourcePath = elementName + '_' + config.CEEnvironment.toLowerCase() + artifactType + ceInstanceID;\n  resourcePath = '/' + resourcePath.substring(0, maxRPlength) + '-';\n  \n  // The proxy name. Needs to be unique so we add env and type\n  let proxyName = instanceName + ' ' + config.CEEnvironment.toLowerCase() + artifactType + ceInstanceID;\n  proxyName = proxyName.substring(0, maxPNlength);\n  proxyName = proxyName && proxyName.replace(notAllowed, '');\n  \n  const swagger = steps.GetInstanceSwagger.response.body;\n  let auth = `${steps.FormatInstanceSwaggerHeaders.headers.Authorization}`\n  auth = auth.split(',').map(b => b.trim()).filter(c => c.startsWith('User'))[0] || '';\n  auth = `${auth}, Element ${trigger.response.body.token}`;\n  \n  const icon = trigger.response.body.element.logo;\n  const tags = [ \"IntegrationBuilder\", config.CEEnvironment ];\n  const access_token = steps.GetAxwayAccessToken.response && steps.GetAxwayAccessToken.response.body && steps.GetAxwayAccessToken.response.body.access_token;\n  \n  const externalType = 'IB_ELEMENT_' + config.CEEnvironment.toUpperCase();\n  \n  done({\n     'headers': { \n      'Authorization': 'Bearer ' + access_token,\n      'X-Axway-Tenant-Id': steps.GetAxwayAccountId.axwayId.split('|')[0]\n    },\n     'body': {\n        resourcePath,\n        proxyName,\n        auth, \n        swagger,\n        icon,\n        tags,\n        externalId: String(ceInstanceID),\n        externalType\n    }\n  });\n} else {\n  throw(\"Invalid element and element instance data in the trigger.\")\n}"}},{"id":591837,"onSuccess":["GetInstanceSwagger"],"onFailure":["SendFormatInstanceSwaggerHeadersErrorNotification"],"name":"FormatInstanceSwaggerHeaders","type":"script","properties":{"body":"// Note: The name of the header below, i.e., Authorization needs to be spelled exactly as below, i.e., with an upper case A, otherwise the following step, i.e., GetInstanceSwagger will use the \"Authorization\" header for this user, who is the super-org admin user, instead of the user who created the instance.\n\ndone({\n   'headers': { \n    Authorization: trigger.request.headers.authorization\n  }\n});"}},{"id":591823,"onSuccess":["GetAxwayAccountId"],"onFailure":["SendGetAxwayAccessTokenErrorNotification"],"name":"GetAxwayAccessToken","type":"httpRequest","properties":{"body":"${steps.PrepAccessTokenRequest.form}","method":"POST","headers":"${steps.PrepAccessTokenRequest.headers}","url":"${config.openid_uri}","form":""}},{"id":591832,"onSuccess":["FormatInstanceSwaggerHeaders"],"onFailure":["SendGetAxwayAccountIdErrorNotification"],"name":"GetAxwayAccountId","type":"script","properties":{"body":"// Utility function to determine if a provided value exists\nlet exists = (value => value != undefined && value != null);\n\nconst account = steps.GetFullAccount.response.body;\n\nif (exists(account) && exists(account.externalId)) {\n  done({\n    'axwayId': account.externalId \n  });\n} else {\n  throw(\"Invalid external account ID.\");\n}"}},{"id":591812,"onSuccess":["GetOrgForCurrentUser"],"onFailure":["SendGetFullAccountErrorNotification"],"name":"GetFullAccount","type":"request","properties":{"method":"GET","api":"/accounts/${steps.GetFullUser.response.body.account.id}"}},{"id":591808,"onSuccess":["GetFullAccount"],"onFailure":["SendGetFullUserErrorNotification"],"name":"GetFullUser","type":"request","properties":{"method":"GET","api":"/users/${trigger.response.body.user.id}"}},{"id":591839,"onSuccess":["FormatEventData"],"onFailure":["SendGetInstanceSwaggerErrorNotification"],"name":"GetInstanceSwagger","type":"request","properties":{"method":"GET","headers":"${steps.FormatInstanceSwaggerHeaders.headers}","api":"/instances/${trigger.response.body.id}/docs?version=-1"}},{"id":591816,"onSuccess":["CheckOrg"],"onFailure":["SendGetOrgForCurrentUserErrorNotification"],"name":"GetOrgForCurrentUser","type":"request","properties":{"method":"GET","api":"/organizations/me"}},{"id":591820,"onSuccess":["GetAxwayAccessToken"],"onFailure":["SendPrepAccessTokenRequestErrorNotification"],"name":"PrepAccessTokenRequest","type":"script","properties":{"body":"\ndone({\n  'headers': { \n      Authorization: 'Basic ' + CE.b64(config.openid_clientid + ':' + config.openid_client_secret),\n      'Content-Type': 'application/x-www-form-urlencoded'\n  },\n  form: 'grant_type=client_credentials'\n});\n"}},{"id":591847,"onSuccess":[],"onFailure":["SendSendEventErrorNotification"],"name":"SendEvent","type":"httpRequest","properties":{"body":"${steps.FormatEventData.body}","method":"POST","headers":"${steps.FormatEventData.headers}","url":"${config.proxyEndpointUrl}","acceptableStatusCodes":""}},{"id":591854,"onSuccess":[],"onFailure":[],"name":"SendFormatEventDataErrorNotification","type":"script","properties":{"body":"let exists = (value => value != undefined && value != null);\n\nlet errorMessage = \"Error formatting proxy registration request.\";\nlet previousStep = steps.FormatEventData;\nlet previousStepName = \"FormatEventData\";\n\ndone(errorNotification(errorMessage, previousStep, previousStepName, config.shouldSendEmail));\n\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n  let returnObj = {};\n  \n  returnObj.subject = \"CE: Error formatting event data\";\n  returnObj.msg = \"<b>Error Message:</b> \" + errorMessage;\n  returnObj.msg += \"<br>Formula Name: \" + info.formulaName;\n\n  if (exists(prevStep)) {\n    returnObj.msg += \"<br>Terminated at step: \" + prevStepName;\n  }\n\n  returnObj.msg += \"<br>Formula ID: \" + info.formulaId;\n  returnObj.msg += \"<br>Formula Instance ID: \" + info.formulaInstanceId;\n  returnObj.msg += \"<br>Formula Execution ID: \" + info.formulaExecutionId;\n  \n  if (exists(prevStep)) {\n    if (exists(prevStep.request)){\n      if (exists(prevStep.request.uri))\n        returnObj.msg += \"<br>Request URL: \" + prevStep.request.uri;\n    }\n\n    if (exists(prevStep.response)){\n      if (exists(prevStep.response.code)){\n        returnObj.msg += \"<br>Response Status: \" + prevStep.response.code;\n      }\n\n      if (exists(prevStep.response.body) && exists(prevStep.response.body.message))\n        returnObj.msg += \"<br>Response Error Message: \" + (prevStep.response.body.message.length <= 500? prevStep.response.body.message : prevStep.response.body.message.substr(0, 500).concat(\"...\"));\n    }\n  }\n\n  returnObj.msg += \"<br>---------------------------------------------------\";\n\n  if (shouldEmail){\n    notify.email(config.CEEmail, returnObj.subject, returnObj.msg);\n    returnObj.sentEmail = true;\n  } else {\n    returnObj.sentEmail = false;\n  }\n  \n  returnObj.notifyTo = config.email;\n  returnObj.success = true;\n\n  return returnObj; \n}"}},{"id":591864,"onSuccess":[],"onFailure":[],"name":"SendFormatInstanceSwaggerHeadersErrorNotification","type":"script","properties":{"body":"let exists = (value => value != undefined && value != null);\n\nlet errorMessage = \"Error formatting instance Swagger request headers.\";\nlet previousStep = steps.FormatInstanceSwaggerHeaders;\nlet previousStepName = \"FormatInstanceSwaggerHeaders\";\n\ndone(errorNotification(errorMessage, previousStep, previousStepName, config.shouldSendEmail));\n\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n  let returnObj = {};\n  \n  returnObj.subject = \"CE: Error formatting swagger headers\";\n  returnObj.msg = \"<b>Error Message:</b> \" + errorMessage;\n  returnObj.msg += \"<br>Formula Name: \" + info.formulaName;\n\n  if (exists(prevStep)) {\n    returnObj.msg += \"<br>Terminated at step: \" + prevStepName;\n  }\n\n  returnObj.msg += \"<br>Formula ID: \" + info.formulaId;\n  returnObj.msg += \"<br>Formula Instance ID: \" + info.formulaInstanceId;\n  returnObj.msg += \"<br>Formula Execution ID: \" + info.formulaExecutionId;\n  \n  if (exists(prevStep)) {\n    if (exists(prevStep.request)){\n      if (exists(prevStep.request.uri))\n        returnObj.msg += \"<br>Request URL: \" + prevStep.request.uri;\n    }\n\n    if (exists(prevStep.response)){\n      if (exists(prevStep.response.code)){\n        returnObj.msg += \"<br>Response Status: \" + prevStep.response.code;\n      }\n\n      if (exists(prevStep.response.body) && exists(prevStep.response.body.message))\n        returnObj.msg += \"<br>Response Error Message: \" + (prevStep.response.body.message.length <= 500? prevStep.response.body.message : prevStep.response.body.message.substr(0, 500).concat(\"...\"));\n    }\n  }\n\n  returnObj.msg += \"<br>---------------------------------------------------\";\n\n  if (shouldEmail){\n    notify.email(config.CEEmail, returnObj.subject, returnObj.msg);\n    returnObj.sentEmail = true;\n  } else {\n    returnObj.sentEmail = false;\n  }\n  \n  returnObj.notifyTo = config.email;\n  returnObj.success = true;\n\n  return returnObj; \n}"}},{"id":591871,"onSuccess":[],"onFailure":[],"name":"SendGetAxwayAccessTokenErrorNotification","type":"script","properties":{"body":"let exists = (value => value != undefined && value != null);\n\nlet errorMessage = \"Error getting axway access_token\";\nlet previousStep = steps.GetAxwayAccessToken;\nlet previousStepName = \"GetAxwayAccessToken\";\n\ndone(errorNotification(errorMessage, previousStep, previousStepName, config.shouldSendEmail));\n\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n  let returnObj = {};\n  \n  returnObj.subject = \"CE: Error getting access_token\";\n  returnObj.msg = \"<b>Error Message:</b> \" + errorMessage;\n  returnObj.msg += \"<br>Formula Name: \" + info.formulaName;\n\n  if (exists(prevStep)) {\n    returnObj.msg += \"<br>Terminated at step: \" + prevStepName;\n  }\n\n  returnObj.msg += \"<br>Formula ID: \" + info.formulaId;\n  returnObj.msg += \"<br>Formula Instance ID: \" + info.formulaInstanceId;\n  returnObj.msg += \"<br>Formula Execution ID: \" + info.formulaExecutionId;\n  \n  if (exists(prevStep)) {\n    if (exists(prevStep.request)){\n      if (exists(prevStep.request.uri))\n        returnObj.msg += \"<br>Request URL: \" + prevStep.request.uri;\n    }\n\n    if (exists(prevStep.response)){\n      if (exists(prevStep.response.code)){\n        returnObj.msg += \"<br>Response Status: \" + prevStep.response.code;\n      }\n\n      if (exists(prevStep.response.body) && exists(prevStep.response.body.message))\n        returnObj.msg += \"<br>Response Error Message: \" + (prevStep.response.body.message.length <= 500? prevStep.response.body.message : prevStep.response.body.message.substr(0, 500).concat(\"...\"));\n    }\n  }\n\n  returnObj.msg += \"<br>---------------------------------------------------\";\n\n  if (shouldEmail){\n    notify.email(config.email, returnObj.subject, returnObj.msg);\n    returnObj.sentEmail = true;\n  } else {\n    returnObj.sentEmail = false;\n  }\n  \n  returnObj.notifyTo = config.email;\n  returnObj.success = true;\n\n  return returnObj; \n}"}},{"id":591867,"onSuccess":[],"onFailure":[],"name":"SendGetAxwayAccountIdErrorNotification","type":"script","properties":{"body":"let exists = (value => value != undefined && value != null);\n\nlet errorMessage = \"Error retrieving Axway account external ID.\";\nlet previousStep = steps.GetAxwayAccountId;\nlet previousStepName = \"GetAxwayAccountId\";\n\ndone(errorNotification(errorMessage, previousStep, previousStepName, config.shouldSendEmail));\n\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n  let returnObj = {};\n  \n  returnObj.subject = \"CE: Error getting CE externalID Axway account\";\n  returnObj.msg = \"<b>Error Message:</b> \" + errorMessage;\n  returnObj.msg += \"<br>Formula Name: \" + info.formulaName;\n\n  if (exists(prevStep)) {\n    returnObj.msg += \"<br>Terminated at step: \" + prevStepName;\n  }\n\n  returnObj.msg += \"<br>Formula ID: \" + info.formulaId;\n  returnObj.msg += \"<br>Formula Instance ID: \" + info.formulaInstanceId;\n  returnObj.msg += \"<br>Formula Execution ID: \" + info.formulaExecutionId;\n  \n  if (exists(prevStep)) {\n    if (exists(prevStep.request)){\n      if (exists(prevStep.request.uri))\n        returnObj.msg += \"<br>Request URL: \" + prevStep.request.uri;\n    }\n\n    if (exists(prevStep.response)){\n      if (exists(prevStep.response.code)){\n        returnObj.msg += \"<br>Response Status: \" + prevStep.response.code;\n      }\n\n      if (exists(prevStep.response.body) && exists(prevStep.response.body.message))\n        returnObj.msg += \"<br>Response Error Message: \" + (prevStep.response.body.message.length <= 500? prevStep.response.body.message : prevStep.response.body.message.substr(0, 500).concat(\"...\"));\n    }\n  }\n\n  returnObj.msg += \"<br>---------------------------------------------------\";\n\n  if (shouldEmail){\n    notify.email(config.CEEmail, returnObj.subject, returnObj.msg);\n    returnObj.sentEmail = true;\n  } else {\n    returnObj.sentEmail = false;\n  }\n  \n  returnObj.notifyTo = config.email;\n  returnObj.success = true;\n\n  return returnObj; \n}"}},{"id":591885,"onSuccess":[],"onFailure":[],"name":"SendGetFullAccountErrorNotification","type":"script","properties":{"body":"let exists = (value => value != undefined && value != null);\n\nlet errorMessage = \"Error retrieving account information.\";\nlet previousStep = steps.GetFullAccount;\nlet previousStepName = \"GetFullAccount\";\n\ndone(errorNotification(errorMessage, previousStep, previousStepName, config.shouldSendEmail));\n\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n  let returnObj = {};\n  \n  returnObj.subject = \"CE: Error getting CE Account\";\n  returnObj.msg = \"<b>Error Message:</b> \" + errorMessage;\n  returnObj.msg += \"<br>Formula Name: \" + info.formulaName;\n\n  if (exists(prevStep)) {\n    returnObj.msg += \"<br>Terminated at step: \" + prevStepName;\n  }\n\n  returnObj.msg += \"<br>Formula ID: \" + info.formulaId;\n  returnObj.msg += \"<br>Formula Instance ID: \" + info.formulaInstanceId;\n  returnObj.msg += \"<br>Formula Execution ID: \" + info.formulaExecutionId;\n  \n  if (exists(prevStep)) {\n    if (exists(prevStep.request)){\n      if (exists(prevStep.request.uri))\n        returnObj.msg += \"<br>Request URL: \" + prevStep.request.uri;\n    }\n\n    if (exists(prevStep.response)){\n      if (exists(prevStep.response.code)){\n        returnObj.msg += \"<br>Response Status: \" + prevStep.response.code;\n      }\n\n      if (exists(prevStep.response.body) && exists(prevStep.response.body.message))\n        returnObj.msg += \"<br>Response Error Message: \" + (prevStep.response.body.message.length <= 500? prevStep.response.body.message : prevStep.response.body.message.substr(0, 500).concat(\"...\"));\n    }\n  }\n\n  returnObj.msg += \"<br>---------------------------------------------------\";\n\n  if (shouldEmail){\n    notify.email(config.CEEmail, returnObj.subject, returnObj.msg);\n    returnObj.sentEmail = true;\n  } else {\n    returnObj.sentEmail = false;\n  }\n  \n  returnObj.notifyTo = config.email;\n  returnObj.success = true;\n\n  return returnObj; \n}"}},{"id":591887,"onSuccess":[],"onFailure":[],"name":"SendGetFullUserErrorNotification","type":"script","properties":{"body":"let exists = (value => value != undefined && value != null);\n\nlet errorMessage = \"Error retrieving user information.\";\nlet previousStep = steps.GetFullUser;\nlet previousStepName = \"GetFullUser\";\n\ndone(errorNotification(errorMessage, previousStep, previousStepName, config.shouldSendEmail));\n\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n  let returnObj = {};\n  \n  returnObj.subject = \"CE: Error getting CE user\";\n  returnObj.msg = \"<b>Error Message:</b> \" + errorMessage;\n  returnObj.msg += \"<br>Formula Name: \" + info.formulaName;\n\n  if (exists(prevStep)) {\n    returnObj.msg += \"<br>Terminated at step: \" + prevStepName;\n  }\n\n  returnObj.msg += \"<br>Formula ID: \" + info.formulaId;\n  returnObj.msg += \"<br>Formula Instance ID: \" + info.formulaInstanceId;\n  returnObj.msg += \"<br>Formula Execution ID: \" + info.formulaExecutionId;\n  \n  if (exists(prevStep)) {\n    if (exists(prevStep.request)){\n      if (exists(prevStep.request.uri))\n        returnObj.msg += \"<br>Request URL: \" + prevStep.request.uri;\n    }\n\n    if (exists(prevStep.response)){\n      if (exists(prevStep.response.code)){\n        returnObj.msg += \"<br>Response Status: \" + prevStep.response.code;\n      }\n\n      if (exists(prevStep.response.body) && exists(prevStep.response.body.message))\n        returnObj.msg += \"<br>Response Error Message: \" + (prevStep.response.body.message.length <= 500? prevStep.response.body.message : prevStep.response.body.message.substr(0, 500).concat(\"...\"));\n    }\n  }\n\n  returnObj.msg += \"<br>---------------------------------------------------\";\n\n  if (shouldEmail){\n    notify.email(config.CEEmail, returnObj.subject, returnObj.msg);\n    returnObj.sentEmail = true;\n  } else {\n    returnObj.sentEmail = false;\n  }\n  \n  returnObj.notifyTo = config.email;\n  returnObj.success = true;\n\n  return returnObj; \n}"}},{"id":591861,"onSuccess":[],"onFailure":[],"name":"SendGetInstanceSwaggerErrorNotification","type":"script","properties":{"body":"let exists = (value => value != undefined && value != null);\n\nlet errorMessage = \"Error retrieving instance Swagger documentation.\";\nlet previousStep = steps.GetInstanceSwagger;\nlet previousStepName = \"GetInstanceSwagger\";\n\ndone(errorNotification(errorMessage, previousStep, previousStepName, config.shouldSendEmail));\n\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n  let returnObj = {};\n  \n  returnObj.subject = \"CE: Error getting CE swagger definition\";\n  returnObj.msg = \"<b>Error Message:</b> \" + errorMessage;\n  returnObj.msg += \"<br>Formula Name: \" + info.formulaName;\n\n  if (exists(prevStep)) {\n    returnObj.msg += \"<br>Terminated at step: \" + prevStepName;\n  }\n\n  returnObj.msg += \"<br>Formula ID: \" + info.formulaId;\n  returnObj.msg += \"<br>Formula Instance ID: \" + info.formulaInstanceId;\n  returnObj.msg += \"<br>Formula Execution ID: \" + info.formulaExecutionId;\n  \n  if (exists(prevStep)) {\n    if (exists(prevStep.request)){\n      if (exists(prevStep.request.uri))\n        returnObj.msg += \"<br>Request URL: \" + prevStep.request.uri;\n    }\n\n    if (exists(prevStep.response)){\n      if (exists(prevStep.response.code)){\n        returnObj.msg += \"<br>Response Status: \" + prevStep.response.code;\n      }\n\n      if (exists(prevStep.response.body) && exists(prevStep.response.body.message))\n        returnObj.msg += \"<br>Response Error Message: \" + (prevStep.response.body.message.length <= 500? prevStep.response.body.message : prevStep.response.body.message.substr(0, 500).concat(\"...\"));\n    }\n  }\n\n  returnObj.msg += \"<br>---------------------------------------------------\";\n\n  if (shouldEmail){\n    notify.email(config.CEEmail, returnObj.subject, returnObj.msg);\n    returnObj.sentEmail = true;\n  } else {\n    returnObj.sentEmail = false;\n  }\n  \n  returnObj.notifyTo = config.email;\n  returnObj.success = true;\n\n  return returnObj; \n}"}},{"id":591882,"onSuccess":[],"onFailure":[],"name":"SendGetOrgForCurrentUserErrorNotification","type":"script","properties":{"body":"let exists = (value => value != undefined && value != null);\n\nlet errorMessage = \"Error retrieving org information.\";\nlet previousStep = steps.GetOrgForCurrentUser;\nlet previousStepName = \"GetOrgForCurrentUser\";\n\ndone(errorNotification(errorMessage, previousStep, previousStepName, config.shouldSendEmail));\n\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n  let returnObj = {};\n  \n  returnObj.subject = \"CE: Error getting CE Org\";\n  returnObj.msg = \"<b>Error Message:</b> \" + errorMessage;\n  returnObj.msg += \"<br>Formula Name: \" + info.formulaName;\n\n  if (exists(prevStep)) {\n    returnObj.msg += \"<br>Terminated at step: \" + prevStepName;\n  }\n\n  returnObj.msg += \"<br>Formula ID: \" + info.formulaId;\n  returnObj.msg += \"<br>Formula Instance ID: \" + info.formulaInstanceId;\n  returnObj.msg += \"<br>Formula Execution ID: \" + info.formulaExecutionId;\n  \n  if (exists(prevStep)) {\n    if (exists(prevStep.request)){\n      if (exists(prevStep.request.uri))\n        returnObj.msg += \"<br>Request URL: \" + prevStep.request.uri;\n    }\n\n    if (exists(prevStep.response)){\n      if (exists(prevStep.response.code)){\n        returnObj.msg += \"<br>Response Status: \" + prevStep.response.code;\n      }\n\n      if (exists(prevStep.response.body) && exists(prevStep.response.body.message))\n        returnObj.msg += \"<br>Response Error Message: \" + (prevStep.response.body.message.length <= 500? prevStep.response.body.message : prevStep.response.body.message.substr(0, 500).concat(\"...\"));\n    }\n  }\n\n  returnObj.msg += \"<br>---------------------------------------------------\";\n\n  if (shouldEmail){\n    notify.email(config.CEEmail, returnObj.subject, returnObj.msg);\n    returnObj.sentEmail = true;\n  } else {\n    returnObj.sentEmail = false;\n  }\n  \n  returnObj.notifyTo = config.email;\n  returnObj.success = true;\n\n  return returnObj; \n}"}},{"id":591874,"onSuccess":[],"onFailure":[],"name":"SendPrepAccessTokenRequestErrorNotification","type":"script","properties":{"body":"let exists = (value => value != undefined && value != null);\n\nlet errorMessage = \"Error formatting Access Token request\";\nlet previousStep = steps.PrepAccessTokenRequest;\nlet previousStepName = \"PrepAccessTokenRequest\";\n\ndone(errorNotification(errorMessage, previousStep, previousStepName, config.shouldSendEmail));\n\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n  let returnObj = {};\n  \n  returnObj.subject = \"CE: formatting Access Token request\";\n  returnObj.msg = \"<b>Error Message:</b> \" + errorMessage;\n  returnObj.msg += \"<br>Formula Name: \" + info.formulaName;\n\n  if (exists(prevStep)) {\n    returnObj.msg += \"<br>Terminated at step: \" + prevStepName;\n  }\n\n  returnObj.msg += \"<br>Formula ID: \" + info.formulaId;\n  returnObj.msg += \"<br>Formula Instance ID: \" + info.formulaInstanceId;\n  returnObj.msg += \"<br>Formula Execution ID: \" + info.formulaExecutionId;\n  \n  if (exists(prevStep)) {\n    if (exists(prevStep.request)){\n      if (exists(prevStep.request.uri))\n        returnObj.msg += \"<br>Request URL: \" + prevStep.request.uri;\n    }\n\n    if (exists(prevStep.response)){\n      if (exists(prevStep.response.code)){\n        returnObj.msg += \"<br>Response Status: \" + prevStep.response.code;\n      }\n\n      if (exists(prevStep.response.body) && exists(prevStep.response.body.message))\n        returnObj.msg += \"<br>Response Error Message: \" + (prevStep.response.body.message.length <= 500? prevStep.response.body.message : prevStep.response.body.message.substr(0, 500).concat(\"...\"));\n    }\n  }\n\n  returnObj.msg += \"<br>---------------------------------------------------\";\n\n  if (shouldEmail){\n    notify.email(config.CEEmail, returnObj.subject, returnObj.msg);\n    returnObj.sentEmail = true;\n  } else {\n    returnObj.sentEmail = false;\n  }\n  \n  returnObj.notifyTo = config.email;\n  returnObj.success = true;\n\n  return returnObj; \n}"}},{"id":591851,"onSuccess":[],"onFailure":[],"name":"SendSendEventErrorNotification","type":"script","properties":{"body":"let exists = (value => value != undefined && value != null);\n\nlet errorMessage = \"Error sending event to proxy registration server.\";\nif (steps && steps.SendEvent && steps.SendEvent.response && steps.SendEvent.response.body) {\n\ttry {\n\t  errorMessage += '<br/>';\n\t  errorMessage += '<pre>';\n\t  errorMessage += JSON.stringify(steps.SendEvent.response.body, null, 2);\n\t  errorMessage += '</pre>';\n\t} catch (e) {\n\t  // do nothing\n\t}\n}\nlet previousStep = steps.SendEvent;\nlet previousStepName = \"SendEvent\";\n\ndone(errorNotification(errorMessage, previousStep, previousStepName, config.shouldSendEmail));\n\n\n/**\n * Sends an email with the given error message to the user's email-address.\n * @param errorMessage The message to be appended to the email\n * @param prevStep The data from previous step, used to populate the errorMessage\n * @param prevStepName The name of the step where the formula was before failure.\n * @param noEmail Optional boolean parameter that's set to false by default. Set the value to true to avoid sending emails \n * @return The message and body to be displayed in the execution.\n */\nfunction errorNotification(errorMessage, prevStep, prevStepName, shouldEmail) {\n  let returnObj = {};\n  \n  returnObj.subject = \"CE: \" + prevStep.response.code + \" Failed to register proxy upon instance creation\";\n  returnObj.msg = \"<b>Error Message:</b> \" + errorMessage;\n  returnObj.msg += \"<br>Formula Name: \" + info.formulaName;\n\n  if (exists(prevStep)) {\n    returnObj.msg += \"<br>Terminated at step: \" + prevStepName;\n  }\n\n  returnObj.msg += \"<br>Formula ID: \" + info.formulaId;\n  returnObj.msg += \"<br>Formula Instance ID: \" + info.formulaInstanceId;\n  returnObj.msg += \"<br>Formula Execution ID: \" + info.formulaExecutionId;\n  returnObj.msg += \"<br>Instance ID: \" + trigger.response.body.id;\n  returnObj.msg += \"<br>Element ID: \" + trigger.response.body.elementId;\n  \n  if (exists(prevStep)) {\n    if (exists(prevStep.request)){\n      if (exists(prevStep.request.uri))\n        returnObj.msg += \"<br>Request URL: \" + prevStep.request.uri;\n    }\n\n    if (exists(prevStep.response)){\n      if (exists(prevStep.response.code)){\n        returnObj.msg += \"<br>Response Status: \" + prevStep.response.code;\n      }\n\n      if (exists(prevStep.response.body) && exists(prevStep.response.body.message))\n        returnObj.msg += \"<br>Response Error Message: \" + (prevStep.response.body.message.length <= 500? prevStep.response.body.message : prevStep.response.body.message.substr(0, 500).concat(\"...\"));\n    }\n  }\n\n  returnObj.msg += \"<br>---------------------------------------------------\";\n\n  if(shouldEmail && (prevStep.response.code == 400)) {\n    notify.email(config.CEEmail, returnObj.subject, returnObj.msg);\n    returnObj.sentEmail = true;\n    returnObj.notifyTo = config.CEEmail;\n  } else if (shouldEmail) {\n    notify.email(config.email, returnObj.subject, returnObj.msg);\n    returnObj.sentEmail = true;\n    returnObj.notifyTo = config.email;\n  } else {\n    returnObj.sentEmail = false;\n  }\n  \n  returnObj.success = false;\n\n  return returnObj; \n}"}}],"triggers":[{"id":54590,"onSuccess":["CheckStatus"],"onFailure":[],"type":"request","async":true,"active":true,"name":"trigger","properties":{"method":"POST","level":"customer","api":"/elements/*/instances"}}],"engine":"v3","active":true,"debugLoggingEnabled":false,"singleThreaded":false,"configuration":[{"id":103915,"key":"CEEmail","name":"CEEmail","type":"value","required":true},{"id":103916,"key":"CEEnvironment","name":"CEEnvironment","type":"value","required":true},{"id":103918,"key":"email","name":"email","type":"value","required":true},{"id":103921,"key":"openid_clientid","name":"openid_clientid","type":"value","required":true},{"id":103922,"key":"openid_client_secret","name":"openid_client_secret","type":"value","required":true},{"id":103923,"key":"openid_uri","name":"openid_uri","type":"value","required":true},{"id":103924,"key":"proxyEndpointUrl","name":"proxyEndpointUrl","type":"value","required":true},{"id":103927,"key":"shouldSendEmail","name":"shouldSendEmail","type":"value","required":true}]}